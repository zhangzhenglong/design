!function(e,t){"use strict";class n{get source(){return this._source}set source(e){this._source=e,e?t.ILaya.loader.load(e,t.Loader.SPINE).then((e=>{!this._source||e&&!e.isCreateFromURL(this._source)||(this.templet=e)})):this.templet=null}get items(){return this._items}set items(e){this._items=e}get templet(){return this._templet}set templet(e){this.init(e)}init(e){this._templet=e,this._templet&&this.flush()}flush(){var e;if(this.target&&this.target.templet&&this._items&&this._templet&&this._templet.skeletonData){if(null==this.target.templet._textures)return;for(let t=this._items.length-1;t>=0;t--){let n=this._items[t],r=n.attachment,i=n.slot,a=n.skin;if(r&&i&&a){let t=null,n=this._templet.skeletonData.skins;for(let i=n.length-1;i>=0;i--)if(n[i].name==a){let a=n[i].attachments;for(let n=a.length-1;n>=0&&(t=null===(e=a[n])||void 0===e?void 0:e[r],!t);n--);break}if(t){let e=t.region.page;this.target.templet._textures[e.name]=e.texture;let n=this.target.getSkeleton().findSlot(i);n&&n.setAttachment(t),this.target.changeNormal()}}}}}}class r{get skin(){return this._skin}set skin(e){this._skin=e}get slot(){return this._slot}set slot(e){this._slot=e}get attachment(){return this._attachment}set attachment(e){this._attachment=e}}class i{static createMesh(e,n,r,i=!1,a=!0){let s=new t.Mesh2D,o=[],h=i?t.BufferUsage.Dynamic:t.BufferUsage.Static,l=t.LayaGL.renderDeviceFactory.createVertexBuffer(h),d=n.vertexDeclaration,p=d.vertexStride;l.vertexDeclaration=d;let m=n.maxVertexCount*p,c=n.vbLength*Float32Array.BYTES_PER_ELEMENT;l.setDataLength(m),a&&l.setData(n.vb.buffer,0,0,c),o.push(l),s._vertexCount=m/p,s._vertexBuffers=o;let u=r.maxIndexCount*r.size;r.ibLength;let f=t.LayaGL.renderDeviceFactory.createIndexBuffer(h);f.indexType=r.type,f.indexCount=r.maxIndexCount,f._setIndexDataLength(u),a&&f._setIndexData(r.ib,0),s._indexBuffer=f;let _=s._bufferState;_.applyState(o,f);let g=[],x=r.outRenderData;for(let e=0,n=x.renderData.length;e<n;e++){let n=x.renderData[e],i=t.LayaGL.renderDeviceFactory.createRenderGeometryElement(t.MeshTopology.Triangles,t.DrawType.DrawElement);i.bufferState=_,i.setDrawElemenParams(n.length,n.offset*r.size),i.indexFormat=r.type,g.push(i)}s._setSubMeshes(g);var S=m+u;return s._setCPUMemory(S),s._setGPUMemory(S),s}static createMeshDynamic(e){let n=new t.Mesh2D,r=[],i=t.BufferUsage.Dynamic,a=t.LayaGL.renderDeviceFactory.createVertexBuffer(i);a.vertexDeclaration=e,r.push(a),n._vertexBuffers=r;let s=t.LayaGL.renderDeviceFactory.createIndexBuffer(i);return n._indexBuffer=s,n._bufferState.applyState(r,s),n}static _updateSpineSubMesh(e,n){let r=e.subMeshCount,i=n.mulitRenderData;if(!i)return!1;let a=i.renderData,s=a.length,o=r!=s,h=e._subMeshes;if(o){let i=Math.max(s,r),o=e._bufferState;for(let e=0;e<i;e++){let r=h[e],i=a[e];i?(r||(r=t.LayaGL.renderDeviceFactory.createRenderGeometryElement(t.MeshTopology.Triangles,t.DrawType.DrawElement),r.bufferState=o,h[e]=r),r.indexFormat=n.type,r.clearRenderParams(),r.setDrawElemenParams(i.length,i.offset*n.size)):r.destroy()}h.length=s}else for(let e=0;e<r;e++){let t=h[e],r=a[e];t.indexFormat=n.type,t.clearRenderParams(),t.setDrawElemenParams(r.length,r.offset*n.size)}return o}static getVertexDeclaration(e){var n=i._vertexDeclarationMap[e];if(!n){for(var r=e.split(","),a=[],s=0,o=0,h=r.length;o<h;o++){var l;switch(r[o]){case"COLOR2":l=new t.VertexElement(s,t.VertexElementFormat.Vector4,i.SPINEMESH_COLOR2),s+=16;break;case"BONE":l=new t.VertexElement(s,t.VertexElementFormat.Single,3),a.push(l),s+=4,l=new t.VertexElement(s,t.VertexElementFormat.Single,4),a.push(l),s+=4,l=new t.VertexElement(s,t.VertexElementFormat.Vector4,5),a.push(l),s+=16,l=new t.VertexElement(s,t.VertexElementFormat.Vector4,6),a.push(l),s+=16,l=new t.VertexElement(s,t.VertexElementFormat.Vector4,7),s+=16;break;case"RIGIDBODY":l=new t.VertexElement(s,t.VertexElementFormat.Single,4),s+=4;break;case"UV":l=new t.VertexElement(s,t.VertexElementFormat.Vector2,0),s+=8;break;case"COLOR":l=new t.VertexElement(s,t.VertexElementFormat.Vector4,1),s+=16;break;case"POSITION":l=new t.VertexElement(s,t.VertexElementFormat.Vector2,2),s+=8;break;default:throw"VertexMesh: unknown vertex flag."}a.push(l)}n=new t.VertexDeclaration(s,a),i._vertexDeclarationMap[e]=n}return n}static getIndexFormat(e){let n=t.IndexFormat.UInt32;return e<256&&t.LayaGL.renderEngine.getCapable(t.RenderCapable.Element_Index_Uint8)?n=t.IndexFormat.UInt8:e<65536&&(n=t.IndexFormat.UInt16),n}}i.SPINEMESH_COLOR2=11,i._vertexDeclarationMap={};class a{static SetSpineBlendMode(e,n,r=!0){switch(e){case 1:n.blend=t.RenderState.BLEND_ENABLE_ALL,n.blendSrc=t.RenderState.BLENDPARAM_SRC_ALPHA,n.blendDst=t.RenderState.BLENDPARAM_ONE;break;case 3:n.blend=t.RenderState.BLEND_ENABLE_SEPERATE,n.blendSrcRGB=t.RenderState.BLENDPARAM_ONE,n.blendDstRGB=t.RenderState.BLENDPARAM_ONE_MINUS_SRC_COLOR,n.blendSrcAlpha=t.RenderState.BLENDPARAM_ONE,n.blendDstAlpha=t.RenderState.BLENDPARAM_ONE;break;case 2:n.blend=t.RenderState.BLEND_ENABLE_ALL,n.blendSrc=t.RenderState.BLENDPARAM_DST_COLOR,n.blendDst=t.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;break;default:n.blend=t.RenderState.BLEND_ENABLE_ALL,n.blendSrc=r?t.RenderState.BLENDPARAM_ONE:t.RenderState.BLENDPARAM_SRC_ALPHA,n.blendDst=t.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA}}static initSpineMaterial(e){e.alphaTest=!1,e.depthWrite=!1,e.cull=t.RenderState.CULL_NONE,e.blend=t.RenderState.BLEND_ENABLE_ALL,e.blendSrc=t.RenderState.BLENDPARAM_SRC_ALPHA,e.blendDst=t.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,e.depthTest=t.RenderState.DEPTHTEST_OFF}static init(){t.Shader3D.addInclude("SpineVertex.glsl","#if !defined(SpineVertex_lib)\n#define SpineVertex_lib\n#ifdef SPINE_SIMPLE\nuniform vec4 u_SimpleAnimatorParams;uniform sampler2D u_SimpleAnimatorTexture;uniform float u_SimpleAnimatorTextureSize;vec4 getBonePosBake(float FramePos,float boneIndices,float weight,vec2 pos,float offset){vec2 uv=vec2(0.0,0.0);float PixelPos=FramePos+boneIndices*2.0;float halfOffset=offset*0.5;float uvoffset=PixelPos/u_SimpleAnimatorTextureSize;uv.y=floor(uvoffset)*offset+halfOffset;uv.x=mod(PixelPos,u_SimpleAnimatorTextureSize)*offset+halfOffset;vec4 up=texture2D(u_SimpleAnimatorTexture,uv);uv.x+=offset;vec4 down=texture2D(u_SimpleAnimatorTexture,uv);float x=pos.x*up.x+pos.y*up.y+up.z;float y=pos.x*down.x+pos.y*down.y+down.z;pos.x=x*weight;pos.y=y*weight;return vec4(pos,0.,1.0);}\n#endif\n#if defined(SPINE_FAST) || defined(SPINE_RB)\nuniform vec4 u_sBone[200];vec4 getBonePos(float fboneId,float weight,vec2 pos){int boneId=int(fboneId);vec4 up=u_sBone[boneId*2];vec4 down=u_sBone[boneId*2+1];float x=pos.x*up.x+pos.y*up.y+up.z;float y=pos.x*down.x+pos.y*down.y+down.z;pos.x=x*weight;pos.y=y*weight;return vec4(pos,0.,1.0);}\n#endif\nuniform vec2 u_size;uniform vec4 u_color;vec4 getSpinePos(){\n#ifdef SPINE_SIMPLE\n#ifdef GPU_INSTANCE\nfloat currentPixelPos=a_SimpleTextureParams.x+a_SimpleTextureParams.y;\n#else\nfloat currentPixelPos=u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\n#endif\nfloat offset=1.0/u_SimpleAnimatorTextureSize;return getBonePosBake(currentPixelPos,a_BoneId,a_weight,a_position,offset)+getBonePosBake(currentPixelPos,a_PosWeightBoneID_2.w,a_PosWeightBoneID_2.z,a_PosWeightBoneID_2.xy,offset)+getBonePosBake(currentPixelPos,a_PosWeightBoneID_3.w,a_PosWeightBoneID_3.z,a_PosWeightBoneID_3.xy,offset)+getBonePosBake(currentPixelPos,a_PosWeightBoneID_4.w,a_PosWeightBoneID_4.z,a_PosWeightBoneID_4.xy,offset);\n#else\n#ifdef SPINE_FAST\nreturn getBonePos(a_BoneId,a_weight,a_position)+getBonePos(a_PosWeightBoneID_2.w,a_PosWeightBoneID_2.z,a_PosWeightBoneID_2.xy)+getBonePos(a_PosWeightBoneID_3.w,a_PosWeightBoneID_3.z,a_PosWeightBoneID_3.xy)+getBonePos(a_PosWeightBoneID_4.w,a_PosWeightBoneID_4.z,a_PosWeightBoneID_4.xy);\n#endif\n#ifdef SPINE_RB\nreturn getBonePos(a_BoneId,1.0,a_position);\n#endif\n#endif\nreturn vec4(a_position.x,a_position.y,0.,1.);}void getGlobalPos(vec4 pos,out vec2 globalPos){\n#ifdef GPU_INSTANCE\nvec3 down=a_NMatrix_1;vec3 up=a_NMatrix_0;\n#else\nvec3 down=u_NMatrix_1;vec3 up=u_NMatrix_0;\n#endif\nfloat x=up.x*pos.x+up.y*pos.y+up.z;float y=down.x*pos.x+down.y*pos.y-down.z;globalPos=vec2(x,-y);}vec4 getScreenPos(vec4 pos){\n#ifdef GPU_INSTANCE\nvec3 down=a_NMatrix_1;vec3 up=a_NMatrix_0;\n#else\nvec3 down=u_NMatrix_1;vec3 up=u_NMatrix_0;\n#endif\nfloat x=up.x*pos.x+up.y*pos.y+up.z;float y=-1.0*(down.x*pos.x+down.y*pos.y-down.z);\n#ifdef CAMERA2D\nvec2 posT=(u_view2D*vec3(x,y,1.0)).xy+u_baseRenderSize2D/2.;x=posT.x;y=posT.y;\n#endif\nv_cliped=getClipedInfo(vec2(x,y));return vec4((x/u_baseRenderSize2D.x-0.5)*2.0,(0.5-y/u_baseRenderSize2D.y)*2.0,pos.z,1.0);}void getVertexInfo(vec4 pos,inout vertexInfo info){info.pos=pos.xy;info.color=vec4(1.0);\n#ifdef COLOR\ninfo.color=a_color;\n#endif\ninfo.color*=u_baseRenderColor;\n#ifdef PREMULTIPLYALPHA\ninfo.color.rgb=info.color.rgb*info.color.a;\n#endif\n#ifdef UV\ninfo.uv=a_uv;\n#endif\n#ifdef LIGHT2D_ENABLE\nvec2 global;vec3 stageInv0=vec3(u_LightAndShadow2DStageMat0.x,u_LightAndShadow2DStageMat0.y,u_LightAndShadow2DStageMat0.z);vec3 stageInv1=vec3(u_LightAndShadow2DStageMat1.x,u_LightAndShadow2DStageMat1.y,u_LightAndShadow2DStageMat1.z);invertMat(stageInv0,stageInv1);getGlobalPos(pos,global);transfrom(global,stageInv0,stageInv1,global);transfrom(global,u_LightAndShadow2DSceneInv0,u_LightAndShadow2DSceneInv1,global);transfrom(global,u_LightAndShadow2DStageMat0,u_LightAndShadow2DStageMat1,global);info.lightUV.x=(global.x-u_LightAndShadow2DParam.x)/u_LightAndShadow2DParam.z;info.lightUV.y=1.0-(global.y-u_LightAndShadow2DParam.y)/u_LightAndShadow2DParam.w;\n#endif\n}\n#endif\n"),t.Shader3D.addInclude("SpineFragment.glsl",'#if !defined(SpineFragment_lib)\n#define SpineFragment_lib\n#include "Sprite2DFrag.glsl";\nvec4 getColor(){vec4 color=texture2D(u_spineTexture,v_texcoord.xy);\n#ifndef GAMMATEXTURE\n#ifdef GAMMASPACE\ncolor.xyz=linearToGamma(color.xyz);\n#endif\n#else\n#ifndef GAMMASPACE\ncolor.xyz=gammaToLinear(color.xyz);\n#endif\n#endif\nreturn color*v_color;}\n#endif\n'),a.BONEMAT=t.Shader3D.propertyNameToID("u_sBone"),a.SpineTexture=t.Shader3D.propertyNameToID("u_spineTexture"),a.SPINE_FAST=t.Shader3D.getDefineByName("SPINE_FAST"),a.SPINE_RB=t.Shader3D.getDefineByName("SPINE_RB"),a.SPINE_UV=t.Shader3D.getDefineByName("COLOR"),a.SPINE_COLOR=t.Shader3D.getDefineByName("UV"),a.SPINE_PREMULTIPLYALPHA=t.Shader3D.getDefineByName("PREMULTIPLYALPHA"),a.SIMPLE_SIMPLEANIMATORPARAMS=t.Shader3D.propertyNameToID("u_SimpleAnimatorParams"),a.SIMPLE_SIMPLEANIMATORTEXTURE=t.Shader3D.propertyNameToID("u_SimpleAnimatorTexture"),a.SIMPLE_SIMPLEANIMATORTEXTURESIZE=t.Shader3D.propertyNameToID("u_SimpleAnimatorTextureSize"),a.SPINE_SIMPLE=t.Shader3D.getDefineByName("SPINE_SIMPLE"),a.SPINE_GPU_INSTANCE=t.Shader3D.getDefineByName("GPU_INSTANCE");const e=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Spine2D");e.addShaderUniform(a.BONEMAT,"u_sBone",t.ShaderDataType.Buffer),e.addShaderUniform(a.SIMPLE_SIMPLEANIMATORPARAMS,"u_SimpleAnimatorParams",t.ShaderDataType.Vector4),e.addShaderUniform(a.SIMPLE_SIMPLEANIMATORTEXTURE,"u_SimpleAnimatorTexture",t.ShaderDataType.Texture2D),e.addShaderUniform(a.SIMPLE_SIMPLEANIMATORTEXTURESIZE,"u_SimpleAnimatorTextureSize",t.ShaderDataType.Float);let n=t.Shader3D.add("SpineStandard",!0,!1);n.shaderType=t.ShaderFeatureType.D2_BaseRednerNode2D;let r={u_spineTexture:t.ShaderDataType.Texture2D},s=new t.SubShader(a.textureSpineAttribute,r);n.addSubShader(s),s.addShaderPass('#define SHADER_NAME SpineStandardVS\n#include "Sprite2DVertex.glsl";\n#include "SpineVertex.glsl";\nvoid main(){vec4 pos=getSpinePos();vertexInfo info;getVertexInfo(pos,info);v_texcoord=info.uv;v_color=info.color;\n#ifdef LIGHT2D_ENABLE\nlightAndShadow(info);\n#endif\ngl_Position=getScreenPos(pos);}','#define SHADER_NAME SpineStandardFS\n#include "SpineFragment.glsl";\n#ifdef COLOR_FILTER\nuniform vec4 u_colorAlpha;uniform mat4 u_colorMat;\n#endif\nvoid main(){clip();gl_FragColor=getColor();\n#ifdef COLOR_FILTER\nmat4 alphaMat=u_colorMat;alphaMat[0][3]*=gl_FragColor.a;alphaMat[1][3]*=gl_FragColor.a;alphaMat[2][3]*=gl_FragColor.a;gl_FragColor=gl_FragColor*alphaMat;gl_FragColor+=u_colorAlpha/255.0*gl_FragColor.a;\n#endif\n#ifdef LIGHT2D_ENABLE\nlightAndShadow(gl_FragColor);\n#endif\n}'),a.SpineNormalVertexDeclaration=i.getVertexDeclaration("UV,COLOR,POSITION"),a.instanceNMatrixDeclaration=new t.VertexDeclaration(24,[new t.VertexElement(0,t.VertexElementFormat.Vector3,8),new t.VertexElement(12,t.VertexElementFormat.Vector3,9)]),a.instanceSimpleAnimatorDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,10)])}}a.textureSpineAttribute={a_uv:[0,t.ShaderDataType.Vector2],a_color:[1,t.ShaderDataType.Vector4],a_position:[2,t.ShaderDataType.Vector2],a_weight:[3,t.ShaderDataType.Float],a_BoneId:[4,t.ShaderDataType.Float],a_PosWeightBoneID_2:[5,t.ShaderDataType.Vector4],a_PosWeightBoneID_3:[6,t.ShaderDataType.Vector4],a_PosWeightBoneID_4:[7,t.ShaderDataType.Vector4],a_NMatrix_0:[8,t.ShaderDataType.Vector3],a_NMatrix_1:[9,t.ShaderDataType.Vector3],a_SimpleTextureParams:[10,t.ShaderDataType.Vector4]},t.Laya.addAfterInitCallback(a.init);class s{get material(){return this._material}set material(e){this._material=e,this.element.materialShaderData=this._material._shaderValues,this.element.subShader=this._material._shader.getSubShaderAt(0)}constructor(e){this.verticesLength=0,this.indicesLength=0,this.init(),this.material=e}init(){let e=t.LayaGL.renderDeviceFactory.createRenderGeometryElement(t.MeshTopology.Triangles,t.DrawType.DrawElement),n=t.LayaGL.renderDeviceFactory.createBufferState();e.bufferState=n;let r=t.LayaGL.renderDeviceFactory.createVertexBuffer(t.BufferUsage.Dynamic);r.vertexDeclaration=this.vertexDeclarition;let i=t.LayaGL.renderDeviceFactory.createIndexBuffer(t.BufferUsage.Dynamic);n.applyState([r],i),e.indexFormat=t.IndexFormat.UInt16,this.geo=e,this.vb=r,this.ib=i,this.element=t.LayaGL.render2DRenderPassFactory.createRenderElement2D(),this.element.nodeCommonMap=["BaseRender2D","spine2D"],this.element.canotPool=!0,this.element.geometry=e,this.element.renderStateIsBySprite=!1}draw(){let e=this.vb,t=this.ib,n=4*this.verticesLength,r=2*this.indicesLength;e.setDataLength(n),e.setData(this.vertexArray.buffer,0,this.vertexArray.byteOffset,n),t._setIndexDataLength(r),t._setIndexData(new Uint16Array(this.indexArray.buffer,this.indexArray.byteOffset,r/2),0),this.geo.clearRenderParams(),this.geo.setDrawElemenParams(r/2,0),this.element.geometry=this.geo}drawByData(e,t,n,r){this.vertexArray=e,this.indexArray=n,this.verticesLength=t,this.indicesLength=r,this.draw()}clear(){this.verticesLength=0,this.indicesLength=0}_cloneTo(e){e.verticesLength=this.verticesLength,e.indicesLength=this.indicesLength,e.vertexArray=new Float32Array(this.vertexArray),e.indexArray=new Uint16Array(this.indexArray)}}s.maxVertex=10922;class o extends s{constructor(e){super(e),null==o.vertexArray&&(o.vertexArray=new Float32Array(s.maxVertex*o.vertexSize),o.indexArray=new Uint16Array(3*s.maxVertex)),this.vertexArray=o.vertexArray,this.indexArray=o.indexArray}appendVerticesClip(e,t){let n=t.length,r=e.length/8,i=o.vertexSize,a=r*i,s=this.verticesLength/i,h=this.vertexArray,l=this.verticesLength,d=l;for(let t=0;t<a;d+=i,t+=8)h[d]=e[t+6],h[d+1]=e[t+7],h[d+2]=e[t+2],h[d+3]=e[t+3],h[d+4]=e[t+4],h[d+5]=e[t+5],h[d+6]=e[t],h[d+7]=e[t+1];this.verticesLength=l+a;let p=this.indexArray;for(let e=this.indicesLength,r=0;r<n;e++,r++)p[e]=t[r]+s;this.indicesLength+=n}canAppend(e,t){return this.verticesLength+e<o.maxVertex*o.vertexSize&&this.indicesLength+t<3*o.maxVertex}appendVertices(e,t,n,r,i,a){let s=o.vertexSize,h=this.verticesLength/s,l=this.vertexArray,d=this.verticesLength;for(let n=0,r=0,o=t;r<o;r+=s,n+=2){let t=d+r;l[t]=a[n],l[t+1]=a[n+1],l[t+2]=i.r,l[t+3]=i.g,l[t+4]=i.b,l[t+5]=i.a,l[t+6]=e[r],l[t+7]=e[r+1]}this.verticesLength=d+t;let p=this.indexArray;for(let e=this.indicesLength,t=0;t<r;e++,t++)p[e]=n[t]+h;this.indicesLength+=r}get vertexDeclarition(){return a.SpineNormalVertexDeclaration}}o.vertexSize=8,o.vertexSize_TwoColor=12;class h{constructor(){this.vmeshs=[],this.nextBatchIndex=0}clearBatch(){for(var e=0;e<this.vmeshs.length;e++)this.vmeshs[e].clear();this.nextBatchIndex=0}nextBatch(e,t){if(this.vmeshs.length==this.nextBatchIndex){let n=this.createMesh(e);return this.vmeshs.push(n),t._renderElements[this.nextBatchIndex++]=n.element,n.element.value2DShaderData=t._spriteShaderData,n}let n=this.vmeshs[this.nextBatchIndex];return t._renderElements[this.nextBatchIndex++]=n.element,n.material=e,n}}const l=[0,1,2,2,3,0];class d extends h{createMesh(e){return new o(e)}constructor(e,t=!0){super(),this.vertexEffect=null,this.tempColor=new window.spine.Color,this.tempColor2=new window.spine.Color,this.vertexSize=8,this.twoColorTint=!1,this.twoColorTint=t,t&&(this.vertexSize+=4),this.templet=e,null==d.vertices&&(d.vertices=spine.Utils.newFloatArray(12288)),this.renderable={vertices:null,numVertices:0,numFloats:0},this.clipper=new spine.SkeletonClipping}draw(e,t,n,r){let i=this.clipper;this.clearBatch();let a,s,h,p,m,c=this.twoColorTint,u=null,f=this.renderable,_=e.drawOrder,g=e.color,x=c?o.vertexSize_TwoColor:o.vertexSize,S=!1;-1==n&&(S=!0);let y=this.templet.needSlot,D=d.vertices;for(let e=0,o=_.length;e<o;e++){let o=i.isClipping()?2:x,d=_[e],A=y?d:d.bone;if(!d.bone.active){i.clipEndWithSlot(d);continue}if(n>=0&&n==d.data.index&&(S=!0),!S){i.clipEndWithSlot(d);continue}r>=0&&r==d.data.index&&(S=!1);let v,I=d.getAttachment();if(I instanceof window.spine.RegionAttachment){let e=I;f.vertices=D,f.numVertices=4,f.numFloats=o<<2,e.computeWorldVertices(A,f.vertices,0,o),s=l,a=e.uvs,v=e.region.page.texture,h=e.color}else{if(!(I instanceof window.spine.MeshAttachment)){if(I instanceof window.spine.ClippingAttachment){let e=I;i.clipStart(d,e);continue}i.clipEndWithSlot(d);continue}{let e=I;f.vertices=D,f.numVertices=e.worldVerticesLength>>1,f.numFloats=f.numVertices*o,f.numFloats>f.vertices.length&&(f.vertices=D=window.spine.Utils.newFloatArray(f.numFloats)),e.computeWorldVertices(d,0,e.worldVerticesLength,f.vertices,0,o),s=e.triangles,v=e.region.page.texture,a=e.uvs,h=e.color}}if(v){let e=d.color,n=this.tempColor;n.r=g.r*e.r*h.r,n.g=g.g*e.g*h.g,n.b=g.b*e.b*h.b,n.a=g.a*e.a*h.a;let r=this.tempColor2;d.darkColor?r.setFromColor(d.darkColor):r.set(0,0,0,1);let o=d.data.blendMode,l=!1;if(o!=u&&(u=o,l=!0),m!=v&&(m=v,l=!0),l){p&&p.draw();let e=t.getMaterial(v.realTexture,u);p=this.nextBatch(e,t),p.clear()}i.isClipping()?(i.clipTriangles(f.vertices,f.numFloats,s,s.length,a,n,r,c),p.canAppend(i.clippedVertices.length,i.clippedTriangles.length)||(p.draw(),p=this.nextBatch(p.material,t),p.clear()),p.appendVerticesClip(i.clippedVertices,i.clippedTriangles)):(p.canAppend(f.numFloats,s.length)||(p.draw(),p=this.nextBatch(p.material,t),p.clear()),0!=n.a&&p.appendVertices(f.vertices,f.numFloats,s,s.length,n,a))}i.clipEndWithSlot(d)}i.clipEnd(),p&&p.draw()}}class p extends s{constructor(e){super(e),this._renderElement2D=t.LayaGL.render2DRenderPassFactory.createRenderElement2D(),this._renderElement2D.geometry=this.geo,this._renderElement2D.nodeCommonMap=["BaseRender2D","spine2D"]}get vertexDeclarition(){return a.SpineNormalVertexDeclaration}}class m extends h{constructor(e,t=!0){super(),this.twoColorTint=!1,this.vmeshs=[],this.nextBatchIndex=0,this.twoColorTint=t,this.templet=e}createMesh(e){return new p(e)}draw(e,t,n,r){this.nextBatchIndex=0,c.drawSkeleton(((e,n,r,i)=>{let a=t.getMaterial(this.templet.getTexture(r),i.value);this.nextBatch(a,t).drawByData(c._vbArray,e,c._ibArray,n)}),e,!1,n,r)}}class c{static initialize(){if(window.Spine)return c.isWasm=!0,window.Spine().then((e=>(c._spine=e,window.spine=e,c.initClass(),c.bindBuffer(131064,32766),c.allAdpat(),Promise.resolve())));window.spine&&(c.isWasm=!1,c.adaptJS(),c.allAdpat())}static createNormalRender(e,t){return c.isWasm?new m(e,t):new d(e,t)}static allAdpat(){let e=window.spine.AnimationState.prototype;e.oldApply=e.apply,e.applyCache=function(e){},e.getCurrentPlayTimeOld=function(e){return this.getCurrentOld(e).getAnimationTime()},e.getCurrentPlayTime=e.getCurrentPlayTimeOld,e.getCurrentPlayTimeByCache=function(e){let t=this.getCurrent(e),n=t.animationStart,r=t.animationEnd,i=r-n;t.trackLast=t.nextTrackLast;let a=t.trackLast%i,s=t.getAnimationTime(),o=!1;if(o=t.loop?0==i||a>t.trackTime%i:s>=r&&t.animationLast<r,o)return this.dispatchEvent(t,"complete",null),t.nextAnimationLast=-1,t.nextTrackLast=-1,0;t.nextAnimationLast=s,t.nextTrackLast=t.trackTime;let h=t.animationLast;return Math.max(h,0)};let t=window.spine.Skeleton.prototype;t.oldUpdateWorldTransform=t.updateWorldTransform,t.updateWorldTransformCache=function(){},window.spine.AnimationState.prototype.dispatchEvent=function(e,t,n){this.eventsObject[t](e,n)}}static adaptJS(){if(window.spine){window.spine.AnimationState.prototype.oldAddListener=window.spine.AnimationState.prototype.addListener,window.spine.AnimationState.prototype.addListener=function(e){this.eventsObject=e,this.oldAddListener(e)};let e=window.spine.SkeletonData.prototype;e.getAnimationsSize=function(){return this.animations.length},e.getAnimationByIndex=function(e){return this.animations[e]},e.getSkinIndexByName=function(e){let t=this.skins;for(let n=0,r=t.length;n<r;n++)if(t[n].name==e)return n;return-1},window.spine.Skeleton.prototype.showSkinByIndex=function(e){this.setSkin(this.data.skins[e])};let t=window.spine.AnimationState.prototype;t.getCurrentOld=t.getCurrent,t.getCurrent=function(e){let t=this.getCurrentOld(e);return this.currentTrack=t,t}}}static initClass(){let e=window.spine.AnimationState.prototype;e.addListener=function(e){this.eventsObject=e,this.setListener(c._spine.AnimationStateListenerObject.implement({callback:(t,n,r,i)=>{e[c.stateMap[n.value]](r,i)}}))},e.getCurrentOld=e.getCurrent,e.setAnimationOld=e.setAnimation,e.setAnimation=function(e,t,n){return this.__tracks&&(this.__tracks.length=0),this.setAnimationOld(e,t,n)},e.getCurrent=function(e){let t,n=this.__tracks;return n?t=n[e]:(n=this.__tracks=[],t=this.getCurrentOld(e),n[e]=t),t||(t=this.getCurrentOld(e),n[e]=t),this.currentTrack=t,t},window.spine.TextureAtlas=u,Object.defineProperty(window.spine.Skin.prototype,"attachments",{get:function(){return this.getAttachments()}});let t=window.spine.Skeleton.prototype;Object.defineProperty(t,"slots",{get:function(){return this.getSlots()}}),Object.defineProperty(t,"data",{get:function(){return this.getData()}}),Object.defineProperty(t,"bones",{get:function(){return this.getBones()}}),Object.defineProperty(t,"color",{get:function(){return this.getColor()}});let n=window.spine.SkeletonData.prototype;Object.defineProperty(n,"name",{get:function(){return this.getName()}}),Object.defineProperty(n,"skins",{get:function(){return this.getSkins()}}),Object.defineProperty(n,"slots",{get:function(){return this.getSlots()}});let r=window.spine.Animation.prototype;Object.defineProperty(r,"name",{get:function(){return this.getName()}}),Object.defineProperty(r,"duration",{get:function(){return this.getDuration()}}),Object.defineProperty(r,"timelines",{get:function(){return this.getTimelines()}}),Object.defineProperty(n,"animations",{get:function(){return this.getAnimations()}}),Object.defineProperty(window.spine.Skin.prototype,"name",{get:function(){return this.getName()}});let i=window.spine.SlotData.prototype;Object.defineProperty(i,"boneData",{get:function(){return this.getBoneData()}}),Object.defineProperty(i,"color",{get:function(){return this.getColor()}}),Object.defineProperty(i,"index",{get:function(){return this.getIndex()}}),Object.defineProperty(i,"attachmentName",{get:function(){return this.getAttachmentName()}}),Object.defineProperty(i,"blendMode",{get:function(){return this.getBlendMode().value}}),Object.defineProperty(window.spine.BoneData.prototype,"index",{get:function(){return this.getIndex()}});let a=window.spine.RegionAttachment.prototype;Object.defineProperty(a,"color",{get:function(){return this.getColor()}}),Object.defineProperty(a,"name",{get:function(){return this.getName()}}),Object.defineProperty(a,"offset",{get:function(){return this.getOffset()}}),Object.defineProperty(a,"uvs",{get:function(){return this.getRotateUVs()}}),Object.defineProperty(a,"region",{get:function(){return this}}),Object.defineProperty(a,"page",{get:function(){return this.getPage()}}),Object.defineProperty(window.spine.AtlasPage.prototype,"name",{get:function(){return this.getName()}});let s=window.spine.MeshAttachment.prototype;Object.defineProperty(s,"bones",{get:function(){return this.getBones()}}),Object.defineProperty(s,"uvs",{get:function(){return this.getUVs()}}),Object.defineProperty(s,"triangles",{get:function(){return this.getTriangles()}}),Object.defineProperty(s,"vertices",{get:function(){return this.getVertices()}}),Object.defineProperty(s,"color",{get:function(){return this.getColor()}}),Object.defineProperty(s,"region",{get:function(){return this}}),Object.defineProperty(s,"page",{get:function(){return this.getPage()}}),Object.defineProperty(s,"name",{get:function(){return this.getName()}});let o=window.spine.EventTimeline.prototype;Object.defineProperty(o,"frames",{get:function(){return this.getFrames()}}),Object.defineProperty(o,"events",{get:function(){return this.getEvents()}});let h=window.spine.AttachmentTimeline.prototype;Object.defineProperty(h,"frames",{get:function(){return this.getFrames()}}),Object.defineProperty(h,"slotIndex",{get:function(){return this.getSlotIndex()}}),Object.defineProperty(h,"attachmentNames",{get:function(){return this.getAttachmentNames()}});let l=window.spine.DrawOrderTimeline.prototype;Object.defineProperty(l,"frames",{get:function(){return this.getFrames()}}),Object.defineProperty(l,"drawOrders",{get:function(){return this.getDrawOrders()}});let d=window.spine.ColorTimeline.prototype;Object.defineProperty(d,"frames",{get:function(){return this.getFrames()}}),Object.defineProperty(d,"slotIndex",{get:function(){return this.getSlotIndex()}});let p=window.spine.TrackEntry.prototype;Object.defineProperty(p,"loop",{get:function(){return this.getLoop()}}),Object.defineProperty(p,"animationStart",{get:function(){return this.getAnimationStart()},set:function(e){}}),Object.defineProperty(p,"animationEnd",{get:function(){return this.getAnimationEnd()}}),Object.defineProperty(p,"animationLast",{get:function(){return this.getAnimationLast()}}),Object.defineProperty(p,"nextAnimationLast",{get:function(){return this.getAnimationLast()},set:function(e){this.setNextAnimationLast(e)}}),Object.defineProperty(p,"trackTime",{get:function(){return this.getTrackTime()}}),Object.defineProperty(p,"animation",{get:function(){return this.getAnimation()}});let m=window.spine.Bone.prototype;Object.defineProperty(m,"a",{get:function(){return this.getA()}}),Object.defineProperty(m,"b",{get:function(){return this.getB()}}),Object.defineProperty(m,"c",{get:function(){return this.getC()}}),Object.defineProperty(m,"d",{get:function(){return this.getD()}}),Object.defineProperty(m,"worldX",{get:function(){return this.getWorldX()}}),Object.defineProperty(m,"worldY",{get:function(){return this.getWorldY()}});let f=window.spine.Event.prototype;Object.defineProperty(f,"volume",{get:function(){return this.getVolume()}}),Object.defineProperty(f,"balance",{get:function(){return this.getBalance()}}),Object.defineProperty(f,"time",{get:function(){return this.getTime()}}),Object.defineProperty(f,"data",{get:function(){return this.getData()}}),Object.defineProperty(f,"floatValue",{get:function(){return this.getFloatValue()}}),Object.defineProperty(f,"intValue",{get:function(){return this.getIntValue()}}),Object.defineProperty(f,"stringValue",{get:function(){return this.getStringValue()}});let _=window.spine.EventData.prototype;Object.defineProperty(_,"name",{get:function(){return this.getName()}}),Object.defineProperty(_,"audioPath",{get:function(){return this.getAudioPath()}})}static bindBuffer(e,t){c._spine.createBuffer(e,t),c._vbArray=c._spine.getVertexsBuffer(),c._ibArray=c._spine.getIndexsBuffer()}static drawSkeleton(e,t,n,r,i){c._spine.drawSkeleton(e,t,n,r,i)}}c.stateMap={0:"start",1:"interrupt",2:"end",3:"complete",4:"dispose",5:"event"};class u{constructor(e,t){return new c._spine.Atlas(e,"",c._spine.TextureLoader.implement({load:(e,n)=>{let r=t(n);e.texture=r},unload:function(e){}}),!0)}}t.Laya.addBeforeInitCallback(c.initialize);class f{getSpineColor(){return this._spineColor}destroy(){}initBake(e){}init(e,n,r,i){this._renerer=c.createNormalRender(n,!1),this._skeleton=e,this._owner=r;let s=e.color;this._spineColor=new t.Color(s.r,s.g,s.b,s.a);let o=r._spriteShaderData.getColor(t.BaseRenderNode2D.BASERENDER2DCOLOR)||new t.Color;o.setValue(s.r,s.g,s.b,s.a),void 0!==r._renderAlpha?o.a*=r._renderAlpha:o.a*=r.owner.alpha,r._spriteShaderData.setColor(t.BaseRenderNode2D.BASERENDER2DCOLOR,o),r._spriteShaderData.removeDefine(a.SPINE_FAST),r._spriteShaderData.removeDefine(a.SPINE_RB)}play(e){}setSkinIndex(e){}changeSkeleton(e){this._skeleton=e}render(e){this._owner.clear(),this._renerer.draw(this._skeleton,this._owner,-1,-1)}}class _{constructor(){}apply(e,t,n){return e>=this.startFrame&&(!(this._lastFrame>=this.endFrame&&e>=this.endFrame)&&(this._lastFrame=e,this.updateVB(t,n)))}initChange(e){return this.sizeMap=e.slotVBMap.get(this.slotId),!0}updateVB(e,t){if(!this.sizeMap&&(this.sizeMap=e.slotVBMap.get(this.slotId),!this.sizeMap))return!1;let n=t[this.slotId];if(n.attachment){let t=n.deform;if(!t||!t.length)return!1;let r=e.vertexSize,i=this.sizeMap.get(n.attachment.name),a=i.offset*r,s=e.vb,o=i.attachment;e.appendDeform(o,t,a,s)}return!0}clone(){let e=new _;return e.slotId=this.slotId,e.startFrame=this.startFrame,e.endFrame=this.endFrame,e}}class g{changeOrder(e){return this.order}change(e,t){return!0}}class x{constructor(e){this.slotId=e}apply(e,t,n){return e>=this.startFrame&&(this.updateVB(t,n),!0)}initChange(e){return this.sizeMap=e.slotVBMap.get(this.slotId),!0}updateVB(e,t){if(!this.sizeMap&&(this.sizeMap=e.slotVBMap.get(this.slotId),!this.sizeMap))return!1;let n=t[this.slotId],r=n.color;if(n.attachment){let t,i,a,s,o=e.vertexSize,h=this.sizeMap.get(n.attachment.name),l=e.vb,d=h.offset*o,p=h.attachment,m=p.lightColor;m?(t=r.r*m.r,i=r.g*m.g,a=r.b*m.b,s=r.a*m.a):(t=r.r,i=r.g,a=r.b,s=r.a);let c=p.vertexCount;for(let e=0;e<c;e++)l[d+e*o+2]=t,l[d+e*o+3]=i,l[d+e*o+4]=a,l[d+e*o+5]=s}return!0}clone(){let e=new x(this.slotId);return e.startFrame=this.startFrame,e.endFrame=this.endFrame,e}}class S{change(e,t){let n=t.get(this.slotId),r=n.get(this.attachment);return r?e.appendVB(r):r=n.get(null),this.attachmentParse=r,!this.attachmentParse.isclip}changeOrder(e){return e[this.slotId]=this.attachmentParse,null}}const y=1/30;class D{static getFloat32Array(e){let t=new Float32Array(8);return t[0]=e.a,t[1]=e.b,t[2]=e.worldX,t[3]=0,t[4]=e.c,t[5]=e.d,t[6]=e.worldY,t[7]=0,t}constructor(){this.isDynamic=!1,this.changeMap=new Map,this.frames=[],this.skinDataArray=[],this.boneFrames=[],this.eventsFrames=[]}getFrameIndex(e,t){let n=this.frames,r=n.length;for(let t=1;t<r;t++)if(n[t]>e)return t-1;return r-1}cacheBones(e){let t=e._play(this.name),n=Math.round(t/y)||1;for(let t=0;t<=n;t++){let n=e._updateState(0==t?0:y),r=[];this.boneFrames.push(r);for(let e=0;e<n.length;e++){let t=n[e],i=D.getFloat32Array(t);r.push(i)}}}check(e,t){this.name=e.name;let n,r=e.timelines,i=this.changeMap,a=this.frames;i.clear(),a.length=0;for(let e=0,a=r.length;e<a;e++){let a=r[e],s=a.frames;if(a instanceof spine.AttachmentTimeline){let e=a.attachmentNames,t=a.slotIndex;for(let n=0,r=s.length;n<r;n++){let r=s[n],a=new S;a.slotId=t,a.attachment=e[n]||null;let o=i.get(r);o||(-1==this.frames.indexOf(r)&&this.frames.push(r),o={iChanges:[]},i.set(r,o)),(o.iChanges=o.iChanges||[]).push(a)}}else if(a instanceof spine.DrawOrderTimeline){let e=a.drawOrders;for(let t=0,n=s.length;t<n;t++){let n=s[t],r=new g;r.order=e[t];let a=i.get(n);a||(-1==this.frames.indexOf(n)&&this.frames.push(n),a={iChanges:[]},i.set(n,a)),(a.iChanges=a.iChanges||[]).push(r)}}else if(a instanceof(spine.ColorTimeline||spine.RGBATimeline)||spine.TwoColorTimeline&&a instanceof spine.TwoColorTimeline){let e=a.slotIndex;if(5==s.length&&0==s[0]&&0==s[4]){let t=new S;t.slotId=e,t.attachment=null;let n=0,r=i.get(n);r||(-1==this.frames.indexOf(n)&&this.frames.push(n),r={iChanges:[]},i.set(n,r)),(r.iChanges=r.iChanges||[]).push(t)}else{let t=new x(e),n=s[0],r=s[5*((s.length/5|0)-1)];t.startFrame=n,t.endFrame=r;let a=i.get(n);a||(-1==this.frames.indexOf(n)&&this.frames.push(n),a={vChanges:[]},i.set(n,a)),-1==this.frames.indexOf(r)&&this.frames.push(r),(a.vChanges=a.vChanges||[]).push(t)}}else if(a instanceof window.spine.ClippingAttachment)n=!0;else if(a instanceof window.spine.EventTimeline){if(t.canCache){let e=a.events;for(let t=0,n=s.length;t<n;t++){let n=s[t],r=e[t];(this.eventsFrames[Math.round(n/y)]=this.eventsFrames[n]||[]).push(r)}}}else if(a instanceof spine.DeformTimeline){let e=a.slotIndex,t=new _;t.slotId=e;let n=s[0],r=s[s.length-1];t.startFrame=n,t.endFrame=r;let o=i.get(n);o||(-1==this.frames.indexOf(n)&&this.frames.push(n),o={vChanges:[]},i.set(n,o)),-1==this.frames.indexOf(r)&&this.frames.push(r),(o.vChanges=o.vChanges||[]).push(t)}}this.isDynamic=!!i.size,a.sort(),n||t.canCache&&(this.cacheBones(t),this.isCache=!0),this.frameNumber=a.length}createSkinData(e,t,n,r,i,a){let s=new A;s.type=a;let o=this.frames;return s.init(this.changeMap,e,t,n,o,r,i,this.isDynamic),s.updateBoneMat=this.isCache?0==this.eventsFrames.length?s.updateBoneMatCache:s.updateBoneMatCacheEvent:s.updateBoneMatByBone,this.skinDataArray.push(s),s}destroy(){for(let e=0,t=this.skinDataArray.length;e<t;e++)this.skinDataArray[e].destroy();this.skinDataArray.length=0,this.frames.length=0,this.changeMap.clear()}}class A{constructor(){this.maxVertexCount=0,this.maxIndexCount=0,this.isDynamic=!1,this.renderDatas=[]}getMesh(){return this._defaultMesh}getFrameData(e){return this.renderDatas[e]||this._defaultFrameData}updateBoneMatCache(e,t,n,r,i){this.vb.updateBoneCache(t.boneFrames,e/y,i)}updateBoneMatCacheEvent(e,t,n,r,i){let a=e/y;this.vb.updateBoneCache(t.boneFrames,a,i);let s=Math.round(a),o=r.currentTrack,h=o.lastEventFrame;if(h!=s){if((h>s||null==h)&&(h=-1),s-h<=1){let e=t.eventsFrames[s];if(e)for(let t=0,n=e.length;t<n;t++)r.dispatchEvent(null,"event",e[t])}else for(let e=h+1;e<=s;e++){let n=t.eventsFrames[e];if(n)for(let e=0,t=n.length;e<t;e++)r.dispatchEvent(null,"event",n[e])}o.lastEventFrame=s}}updateBoneMatByBone(e,t,n,r,i){this.vb.updateBone(n,i)}init(e,t,n,r,a,s,o,h){if(this.mainIB=n,this.isDynamic=h,this.canInstance=!this.isDynamic,h){this.vb=t.clone(),this.vb.initBoneMat();let i,h=o.slice(),l=a.length;for(let t=0;t<l;t++){let o=a[t],l=e.get(o);if(!l)continue;let d=l.iChanges,p={};if(d){for(let e=0,t=d.length;e<t;e++){let t=d[e];t.change(this.vb,s)||(this.isNormalRender=!0);let n=t.changeOrder(h);n&&(i=n)}r.createIB(h,this.vb,i),p.ib=r.ib.slice(0,r.ibLength),p.mulitRenderData=r.outRenderData,p.type=r.type,p.size=r.size}let m=l.vChanges;if(m){let e=[];for(let n=0,r=m.length;n<r;n++){let r=m[n].clone();r.initChange(this.vb)&&(r.startFrame=t,r.endFrame=a.indexOf(r.endFrame),e.push(r))}p.vChanges=e}this.renderDatas.push(p),o||(p.ib||(p.mulitRenderData=n.outRenderData,p.ib=n.ib.slice(0,this.mainIB.ibLength),p.type=n.type,p.size=n.size),this._defaultFrameData=p)}this.maxIndexCount=Math.max(r.maxIndexCount,this.mainIB.maxIndexCount)}else this.vb=t,this._defaultMesh=i.createMesh(this.type,this.vb,n,this.isDynamic),this.maxIndexCount=n.maxIndexCount;this.maxVertexCount=this.vb.maxVertexCount,this._defaultFrameData||(this._defaultFrameData={mulitRenderData:n.outRenderData,ib:n.ib.slice(0,this.mainIB.ibLength),type:n.type,size:n.size})}destroy(){this._defaultMesh&&this._defaultMesh.destroy(),this._defaultMesh=null,this._defaultFrameData=null,this.renderDatas=null}}class v{}v.BONEVERTEX=22,v.RIGIDBODYVERTEX=9;const I=[0,1,2,2,3,0];class w{constructor(){this.vertexCount=0,this.indexCount=0,this.isNormalRender=!1,this.vertexBones=0}init(e,n,r,i,a){this.slotId=r,this.sourceData=e,this.attachment=e.name,this.boneIndex=n;let s=a.color;this.blendMode=a.blendMode;let o,h=this.color=new t.Color;if(a.darkColor,e instanceof spine.RegionAttachment){o=e.color;let t=e;this.vertexArray=t.offset,this.stride=2,this.indexArray=I,this.uvs=t.uvs,this.textureName=t.region.page.name}else if(e instanceof spine.MeshAttachment){o=e.color;let t=v.BONEVERTEX,n=e;if(this.textureName=n.region.page.name,n.bones&&0!=n.bones.length){i&&i.length,this.stride=t-6;let e=n.uvs.length/2,r=this.vertexArray=new Float32Array(e*this.stride);this.indexArray=n.triangles,this.uvs=n.uvs;let a=n.vertices,s=n.bones,o=0,h=(t-6)/4;this.vertexBones=h;for(let t=0,n=0;t<e;t++){let e=s[o++];e+=o;let i=[],l=t*this.stride,d=0;for(;o<e;o++,n+=3,d++)i.push([a[n],a[n+1],a[n+2],s[o]]);i.length>h&&(this.vertexBones=Math.max(this.vertexBones,i.length),i.length=h,this.isNormalRender=!0);for(let e=0;e<h;e++){let t=i[e];t&&(r[l+4*e]=t[0],r[l+4*e+1]=t[1],r[l+4*e+2]=t[2],r[l+4*e+3]=t[3])}}}else i&&i.length>1?this.vertexArray=new Float32Array(i):this.vertexArray=n.vertices,this.stride=2,this.indexArray=n.triangles,this.uvs=n.uvs}else e instanceof spine.ClippingAttachment?(this.attachment=null,this.isclip=!0):e instanceof spine.PathAttachment?(this.attachment=e.name,this.vertexArray=new Float32Array(e.vertices),this.isPath=!0):this.attachment=null;return this.textureName&&(this.vertexCount=this.vertexArray.length/this.stride,this.indexCount=this.indexArray.length),o&&((1!=o.a||1!=o.r||1!=o.g&&1!=o.b)&&(this.lightColor=o),h.r=s.r*o.r,h.g=s.g*o.g,h.b=s.b*o.b,h.a=s.a*o.a),!0}}class B{constructor(){this.renderData=[],this.id=B.ID++}addData(e,t,n,r,i){this.currentData={textureName:e,blendMode:t,offset:n,length:r,attachment:i},this.renderData.push(this.currentData)}endData(e){this.currentData.length=e-this.currentData.offset}}B.ID=0;class E{constructor(){this.ibLength=0,this.maxIndexCount=0}updateFormat(e){let t=i.getIndexFormat(e);this.type!==t&&(this.type=t,this._updateBuffer())}setBufferLength(e){e<=this.maxIndexCount||(this.maxIndexCount=e,this._updateBuffer())}_updateBuffer(){let e=this.ib;switch(this.type){case t.IndexFormat.UInt16:this.size=2,this.ib=new Uint16Array(this.maxIndexCount);break;case t.IndexFormat.UInt8:this.size=1,this.ib=new Uint8Array(this.maxIndexCount);break;case t.IndexFormat.UInt32:this.size=4,this.ib=new Uint32Array(this.maxIndexCount)}e&&this.ib.set(e)}createIB(e,t,n){let r,a,s=0,o=t.slotVBMap;n?(r=n,a=function(t){return e[t]}):(r=e,a=function(e){return e});let h,l,d=new B,p=[],m=-1;for(let e=0,t=r.length;e<t;e++){let t=a(r[e]);if(t.attachment&&!t.isPath){let e=!1;h!=t.textureName&&(h=t.textureName,e=!0),l!=t.blendMode&&(l=t.blendMode,e=!0),e&&(d.currentData&&d.endData(s),d.addData(t.textureName,t.blendMode,s,0,t.attachment));let n=o.get(t.slotId).get(t.attachment);t.attachment&&t.indexArray&&(p.push({data:t.indexArray,offset:n.offset,start:s}),s+=t.indexArray.length,m=Math.max(m,s))}}let c=t.maxVertexCount,u=i.getIndexFormat(c),f=!1;u!==this.type&&(this.type=u,f=!0),m>this.maxIndexCount&&(this.maxIndexCount=m,f=!0),f&&this._updateBuffer();let _=this.ib;for(let e=0,t=p.length;e<t;e++){let t=p[e],n=t.offset,r=t.start;for(let e=0,i=t.data.length;e<i;e++)_[r+e]=t.data[e]+n}h&&d.endData(s),this.outRenderData=d,this.ibLength=s}}class P{static checkAttachment(t){if(null==t)return e.ESpineRenderType.rigidBody;if(t instanceof window.spine.RegionAttachment)return e.ESpineRenderType.rigidBody;if(t instanceof window.spine.MeshAttachment){return t.bones?e.ESpineRenderType.boneGPU:e.ESpineRenderType.rigidBody}return e.ESpineRenderType.normal}static appendIndexArray(e,t,n,r){if(!e.attachment||!e.indexArray)return r;let i=e.indexArray;for(let e=0,a=i.length;e<a;e++)t[r]=i[e]+n,r++;return r}}class b{constructor(e){this.animator=e,this.reset()}set skinIndex(e){this.currentSKin=this.animator.skinDataArray[e]}get name(){return this.animator.name}reset(){this.currentTime=-1,this.currentFrameIndex=-1}renderWithOutMat(e,t,n){let r=this.currentFrameIndex,i=this.animator.getFrameIndex(n,r),a=this.currentSKin;t.renderUpdate(a,i,r),this.currentTime=n,this.currentFrameIndex=i}render(e,t,n,r,i){this.renderWithOutMat(t,n,r),this.currentSKin.updateBoneMat(r,this.animator,e,this.state,i)}}class M{constructor(e,t){this.currentMaterials=[],this.cacheMaterials=[],this.vChanges=[],this.vertexBones=0,this.owner=e,this.name=t.name,this.hasNormalRender=t.hasNormalRender,this.vertexBones=t.vertexBones,this.skinAttachType=t.type}getMaterialByName(e,t){return this.templet.getMaterial(this.templet.getTexture(e),t)}renderUpdate(e,t,n){const r=this.owner._nodeOwner;let i=!1;i=e.isDynamic?this.updateDynamicRender(e,t,n,r):this.handleRender(e,t,r,e.getMesh()),i&&r._updateRenderElements()}updateDynamicRender(e,t,n,r){let a=this.owner.getDynamicMesh(e.vb.vertexDeclaration),s=this.vChanges,o=e.getFrameData(t),h=t<0;for(let r=n+1;r<=t;r++){let t=e.getFrameData(r).vChanges;if(t)for(const e of t)s.includes(e)||s.push(e)}let l=!1;for(let n=s.length-1;n>=0;n--){s[n].apply(t,e.vb,this.owner.slots)?l=!0:s.splice(n,1)}(l||h)&&this.uploadVertexBuffer(e.vb,a),(o.ib||h)&&this.uploadIndexBuffer(o,a);let d=i._updateSpineSubMesh(a,o);return this.handleRender(e,t,r,a,d)}handleRender(e,t,n,r,i=!1){let a=!1,s=e.getFrameData(t).mulitRenderData;if(s){let e=this.cacheMaterials[s.id]||this.createMaterials(s);this.currentMaterials!==e&&(n._updateMaterials(e),a=!0,this.currentMaterials=e)}return!n._onMeshChange(r,i)||a}createMaterials(e){let t=e.renderData.map((e=>this.getMaterialByName(e.textureName,e.blendMode)));return this.cacheMaterials[e.id]=t,t}uploadIndexBuffer(e,t){let n=e.ib,r=t._indexBuffer;r.indexType=e.type,r.indexCount=n.length,r._setIndexDataLength(n.byteLength),r._setIndexData(n,0)}uploadVertexBuffer(e,t){let n=t.vertexBuffers[0],r=4*e.vbLength;n.setDataLength(e.maxVertexCount*e.vertexSize*4),n.setData(e.vb.buffer,0,0,r)}init(e,t,n){this.templet=t,this.hasNormalRender&&(this._renderer=c.createNormalRender(t,!1))}render(e){}}class R{constructor(e){this._skinIndex=0,this.renderProxyMap=new Map,this._dynamicMap=new Map,this.animatorMap=new Map,this.skinRenderArray=[],this.boneMat=new Float32Array(8*e.maxBoneNumber),e.skinAttachArray.forEach((e=>{this.skinRenderArray.push(new M(this,e))}));let t=e.animators;for(let e=0,n=t.length;e<n;e++){let n=t[e];this.animatorMap.set(n.name,new b(n))}this.currentRender=this.skinRenderArray[this._skinIndex]}getSpineColor(){return this.spineColor}destroy(){this._dynamicMap.forEach((e=>e.destroy())),this._dynamicMap.clear()}initBake(e){if(this.bakeData=e,e){let t=this.renderProxyMap.get(C.RenderBake)||new k(this.bones,this.slots,this._nodeOwner);t.simpleAnimatorTexture=e.texture2d,t._bonesNums=e.bonesNums,t.aniOffsetMap=e.aniOffsetMap,this.renderProxyMap.set(C.RenderBake,t)}this.isBake=!!e,this._curAnimationName&&(this._clear(),this.play(this._curAnimationName))}changeSkeleton(e){this._skeleton=e,this.bones=e.bones,this.slots=e.slots,this.renderProxyMap.get(C.RenderNormal)._skeleton=e}init(e,n,r,i){this._skeleton=e,this.bones=e.bones,this.slots=e.slots,this._nodeOwner=r;let a=e.color;this.spineColor=new t.Color(a.r,a.g,a.b,a.a);let s=r._spriteShaderData.getColor(t.BaseRenderNode2D.BASERENDER2DCOLOR)||new t.Color;s.setValue(a.r,a.g,a.b,a.a),void 0!==r._renderAlpha?s.a*=r._renderAlpha:s.a*=r.owner.alpha,r._spriteShaderData.setColor(t.BaseRenderNode2D.BASERENDER2DCOLOR,s),this.skinRenderArray.forEach((t=>{t.init(e,n,r)})),this._state=i,this.animatorMap.forEach(((e,t)=>{e.state=i}));let o=new T(this.bones,this.slots,this._nodeOwner),h=new L(e,this._nodeOwner);this.renderProxyMap.set(C.RenderNormal,h),this.renderProxyMap.set(C.RenderOptimize,o)}get renderProxytype(){return this._renderProxytype}set renderProxytype(e){this.isBake&&e==C.RenderOptimize&&null!=this.bakeData.aniOffsetMap[this._curAnimationName]&&(e=C.RenderBake),this.renderProxy=this.renderProxyMap.get(e),e==C.RenderNormal&&(this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_FAST),this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_RB)),this._renderProxytype=e}beginCache(){this._state.apply=this._state.applyCache,this._state.getCurrentPlayTime=this._state.getCurrentPlayTimeByCache,this._skeleton.updateWorldTransform=this._skeleton.updateWorldTransformCache}endCache(){this._state.apply=this._state.oldApply,this._state.getCurrentPlayTime=this._state.getCurrentPlayTimeOld,this._skeleton.updateWorldTransform=this._skeleton.oldUpdateWorldTransform}setSkinIndex(t){switch(this._skinIndex=t,this.currentRender=this.skinRenderArray[t],this.currentRender.skinAttachType){case e.ESpineRenderType.boneGPU:this._nodeOwner._spriteShaderData.addDefine(a.SPINE_FAST),this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_RB);break;case e.ESpineRenderType.rigidBody:this._nodeOwner._spriteShaderData.addDefine(a.SPINE_RB),this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_FAST);break;case e.ESpineRenderType.normal:this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_FAST),this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_RB)}this.currentAnimation&&(this._clear(),this.play(this._curAnimationName))}getDynamicMesh(e,t=!0){let n=e.id,r=this._dynamicMap.get(n);return!r&&t&&(r=i.createMeshDynamic(e),this._dynamicMap.set(n,r)),r}_clear(){this._nodeOwner.clear(),this._isRender=!1}play(t){this._curAnimationName=t;let n=this.currentRender,r=this.renderProxy,i=this.currentAnimation,s=i?i.currentSKin:null,o=this.currentAnimation=this.animatorMap.get(t);o.skinIndex=this._skinIndex;let h=o.currentSKin;if(i&&i.reset(),h.isNormalRender)this.renderProxytype=C.RenderNormal;else{switch(n.vertexBones>4&&console.warn(`In FastRender mode - Current skin: ${n.name} has ${n.vertexBones} bones influencing each vertex. This exceeds the recommended limit of 4 bones per vertex.`),this.currentRender.skinAttachType){case e.ESpineRenderType.boneGPU:this._nodeOwner._spriteShaderData.addDefine(a.SPINE_FAST),this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_RB);break;case e.ESpineRenderType.rigidBody:this._nodeOwner._spriteShaderData.addDefine(a.SPINE_RB),this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_FAST);break;case e.ESpineRenderType.normal:this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_FAST),this._nodeOwner._spriteShaderData.removeDefine(a.SPINE_RB)}i&&s.isNormalRender&&this._clear(),s==h&&this._nodeOwner._mesh||n.renderUpdate(h,-1,-1),this._isRender||(this.renderProxytype=C.RenderOptimize,this._isRender=!0)}r&&r.leave(),this.renderProxy.change(n,o),!o.animator.isCache&&this.renderProxytype!=C.RenderBake||h.isNormalRender?this.endCache():this.beginCache()}render(e){this.renderProxy.render(e,this.boneMat)}}var C,N;!function(e){e[e.RenderNormal=0]="RenderNormal",e[e.RenderOptimize=1]="RenderOptimize",e[e.RenderBake=2]="RenderBake"}(C||(C={}));class T{constructor(e,t,n){this.bones=e,this.slots=t,this._renderNode=n}change(e,t){this.skinUpdate=e,this.currentAnimation=t}leave(){}render(e,t){this.currentAnimation.render(this.bones,this.slots,this.skinUpdate,e,t),this._renderNode._spriteShaderData.setBuffer(a.BONEMAT,t)}}class L{constructor(e,t){this._renderNode=t,this._skeleton=e}leave(){}change(e,t){this._renerer=e._renderer}render(e,t){this._renderNode.clear(),this._renerer.draw(this._skeleton,this._renderNode,-1,-1)}}class k{get simpleAnimatorTexture(){return this._simpleAnimatorTexture}set simpleAnimatorTexture(e){this._simpleAnimatorTexture&&this._simpleAnimatorTexture._removeReference(),this._simpleAnimatorTexture=e,this._simpleAnimatorTextureSize=e.width,this._renderNode._spriteShaderData.setTexture(a.SIMPLE_SIMPLEANIMATORTEXTURE,e),e._addReference(),this._renderNode._spriteShaderData.setNumber(a.SIMPLE_SIMPLEANIMATORTEXTURESIZE,this._simpleAnimatorTextureSize)}get simpleAnimatorOffset(){return this._simpleAnimatorOffset}set simpleAnimatorOffset(e){e.cloneTo(this._simpleAnimatorOffset)}constructor(e,n,r){this.step=1/60,this._simpleAnimatorParams=new t.Vector4,this.bones=e,this.slots=n,this._renderNode=r,this._simpleAnimatorOffset=new t.Vector2}leave(){this._renderNode._spriteShaderData.removeDefine(a.SPINE_SIMPLE),this._renderNode._renderType=t.BaseRender2DType.spine}change(e,n){this.skinRender=e,this.currentAnimation=n,this._renderNode._spriteShaderData.addDefine(a.SPINE_SIMPLE),this._simpleAnimatorOffset.x=this.aniOffsetMap[n.name],n.currentSKin.canInstance&&(this._renderNode._renderType=t.BaseRender2DType.spineSimple)}_computeAnimatorParamsData(){this._simpleAnimatorParams.x=this._simpleAnimatorOffset.x,this._simpleAnimatorParams.y=Math.round(this._simpleAnimatorOffset.y)*this._bonesNums*2}setCustomData(e,t=0){this._simpleAnimatorParams.z=e,this._simpleAnimatorParams.w=t}render(e,t){this.currentAnimation.renderWithOutMat(this.slots,this.skinRender,e),this._simpleAnimatorOffset.y=e/this.step,this._computeAnimatorParamsData(),this._renderNode._spriteShaderData.setVector(a.SIMPLE_SIMPLEANIMATORPARAMS,this._simpleAnimatorParams)}}class O{constructor(e,t=0,n=!0){this._vertexSize=0,this.twoColorTint=!1,this.boneMaxId=0,this.maxVertexCount=t,this.vertexFlag=e,this.mapIndex=new Map,this.slotVBMap=new Map,this.boneArray=[],this.vbLength=0,n&&(this._vertexDeclaration=i.getVertexDeclaration(this.vertexFlag),this.twoColorTint=-1!=e.indexOf("COLOR2"),this._vertexSize=this._vertexDeclaration.vertexStride/4,this._updateBuffer())}setBufferLength(e){e<=this.maxVertexCount||(this.maxVertexCount=e,this._updateBuffer())}_updateBuffer(){let e=this.vb;this.vb=new Float32Array(this.maxVertexCount*this.vertexSize),e&&this.vb.set(e)}get vertexSize(){return this._vertexSize}get vertexDeclaration(){return this._vertexDeclaration}appendAndCreateIB(e){this.appendVB(e)}getBoneId(e){let t=this.mapIndex.get(e);return null==t&&(t=this.boneMaxId,this.mapIndex.set(e,t),this.boneArray.push(t,e),this.boneMaxId++),t}initBoneMat(){this.boneMat=new Float32Array(8*this.mapIndex.size)}appendVB(e){let t,n=this.slotVBMap.get(e.slotId);if(n){let t=n.get(e.attachment);if(null!=t)return t}else n=new Map,this.slotVBMap.set(e.slotId,n);return t=this.vbLength/this.vertexSize,n.set(e.attachment,{offset:t,attachment:e}),e.vertexCount?(t+e.vertexCount>=this.maxVertexCount&&this.setBufferLength(t+e.vertexCount),this.vbLength=this.appendVertexArray(e,this.vb,this.vbLength,this),t):t}updateBone(e,t){let n=this.boneArray;for(let r=0,i=n.length;r<i;r+=2){let i=8*n[r],a=e[n[r+1]];t[i]=a.a,t[i+1]=a.b,t[i+2]=a.worldX,t[i+3]=0,t[i+4]=a.c,t[i+5]=a.d,t[i+6]=a.worldY,t[i+7]=0}}updateBoneCache(e,t,n){let r,i=this.boneArray,a=Math.floor(t);r=a==e.length-1?0:t-a;let s=e[a],o=e[a+1];if(r>1e-4)for(let e=0,t=i.length;e<t;e+=2){let t=8*i[e],a=s[i[e+1]],h=o[i[e+1]];n[t]=a[0]+(h[0]-a[0])*r,n[t+1]=a[1]+(h[1]-a[1])*r,n[t+2]=a[2]+(h[2]-a[2])*r,n[t+3]=0,n[t+4]=a[4]+(h[4]-a[4])*r,n[t+5]=a[5]+(h[5]-a[5])*r,n[t+6]=a[6]+(h[6]-a[6])*r,n[t+7]=0}else for(let e=0,t=i.length;e<t;e+=2){let t=8*i[e],r=s[i[e+1]];n.set(r,t)}}_cloneTo(e){e.vb=new Float32Array(this.vb),e.vbLength=this.vbLength,e.mapIndex=new Map(this.mapIndex),e.boneMaxId=this.boneMaxId,e.boneArray=this.boneArray.slice(),e._vertexDeclaration=this._vertexDeclaration,e._vertexSize=this._vertexSize,e.twoColorTint=this.twoColorTint,this.slotVBMap.forEach(((t,n)=>{e.slotVBMap.set(n,new Map(t))}))}clone(){let e=this._create();return this._cloneTo(e),e}}class V extends O{_create(){return new V(this.vertexFlag,this.maxVertexCount,!1)}get vertexSize(){return v.BONEVERTEX}appendVertexArray(e,t,n,r){if(!e.attachment)return r.getBoneId(e.boneIndex),n;let i=this.vertexSize,a=e.vertexArray,s=e.uvs,o=e.color;if(e.color,2==e.stride){let h=r.getBoneId(e.boneIndex);for(let r=0,l=a.length;r<l;r+=e.stride){t[n]=s[r],t[n+1]=s[r+1],t[n+2]=o.r,t[n+3]=o.g,t[n+4]=o.b,t[n+5]=o.a,t[n+6]=a[r],t[n+7]=a[r+1],t[n+8]=1,t[n+9]=h;let e=i-10,l=n+10;for(let n=0;n<e/4;n++)t[l+4*n]=0,t[l+4*n+1]=0,t[l+4*n+2]=0,t[l+4*n+3]=0;n+=i}}else for(let h=0,l=0,d=a.length;h<d;h+=e.stride,l+=2){t[n]=s[l],t[n+1]=s[l+1],t[n+2]=o.r,t[n+3]=o.g,t[n+4]=o.b,t[n+5]=o.a;let e=i-6,d=n+6;for(let n=0;n<e/4;n++)t[d+4*n]=a[h+4*n],t[d+4*n+1]=a[h+4*n+1],t[d+4*n+2]=a[h+4*n+2],t[d+4*n+3]=r.getBoneId(a[h+4*n+3]);n+=i}return n}appendDeform(e,t,n,r){if(!e.attachment)return;let i=this.vertexSize,a=e.vertexArray;if(2==e.stride)for(let s=0,o=a.length;s<o;s+=e.stride)r[n+6]=t[s],r[n+7]=t[s+1],n+=i;else{let s=e.sourceData.bones,o=e.vertexCount,h=(i-6)/4,l=0,d=0;for(let e=0;e<o;e++){let o=s[d++],p=e*(i-6),m=n+e*i+6;for(let e=0;e<o&&!(e>=h);e++){let n=l+2*e,i=p+4*e,s=m+4*e;r[s]=a[i]+t[n],r[s+1]=a[i+1]+t[n+1]}d+=o,l+=2*o}}}}class F extends O{_create(){return new F(this.vertexFlag,this.maxVertexCount,!1)}appendVertexArray(e,t,n,r){let i=e.vertexArray,a=e.uvs,s=e.color,o=this.vertexSize;if(2==e.stride){let h=r.getBoneId(e.boneIndex);for(let r=0,l=i.length;r<l;r+=e.stride)t[n+0]=a[r],t[n+1]=a[r+1],t[n+2]=s.r,t[n+3]=s.g,t[n+4]=s.b,t[n+5]=s.a,t[n+6]=i[r],t[n+7]=i[r+1],t[n+8]=h,n+=o}return n}appendDeform(e,t,n,r){if(!e.attachment)return;let i=this.vertexSize,a=e.vertexArray;if(2==e.stride)for(let s=0,o=a.length;s<o;s+=e.stride)r[n+6]=t[s],r[n+7]=t[s+1],n+=i}}class U{constructor(){this.blendModeMap=new Map,this.skinAttachArray=[],this.animators=[],this.canCache=U.cacheSwitch}_initSpineRender(e,t,n,r){let i;return U.normalRenderSwitch?i=new f:this.maxBoneNumber>U.MAX_BONES?(console.warn("The number of Bones :",this.maxBoneNumber," > ",U.MAX_BONES,", use CPU caculation"),i=new f):i=new R(this),i.init(e,t,n,r),i}_updateState(e){return this._state.update(e),this._state.getCurrent(0),this._state.apply(this.sketon),this.sketon.updateWorldTransform(),this.sketon.bones}_play(e){let t=this._state.setAnimation(0,e,!0);return t.animationStart=0,t.animation.duration}checkMainAttach(e){this.sketon=new spine.Skeleton(e),this._stateData=new spine.AnimationStateData(this.sketon.data),this._state=new spine.AnimationState(this._stateData),this.attachMentParse(e),this.initAnimation(e.animations)}attachMentParse(e){let t,n=e.skins,r=e.slots;this._tempIbCreate=new E;for(let e=0,i=n.length;e<i;e++){let i=n[e],a=new z;a.name=i.name,a._tempIbCreate=this._tempIbCreate,0!=e&&a.copyFrom(t),a.attachMentParse(i,r),this.skinAttachArray.push(a),a.init(r),0==e&&(t=a)}}initAnimation(e){let t=0;for(let n=0,r=e.length;n<r;n++){let r=e[n],i=new D;i.check(r,this),this.animators.push(i),this.skinAttachArray.forEach((e=>{e.initAnimator(i)})),i.skinDataArray.forEach((e=>{if(!e.isNormalRender){let n=e.vb.boneArray.length/2;n>t&&(t=n)}}))}this.maxBoneNumber=t}cacheBone(){if(!U.cacheSwitch)for(let e=0,t=this.animators.length;e<t;e++){let t=this.animators[e];0==t.boneFrames.length&&t.cacheBones(this)}}destroy(){for(let e=0,t=this.animators.length;e<t;e++)this.animators[e].destroy();this.animators.length=0}init(e){}}U.normalRenderSwitch=!1,U.MAX_BONES=100,U.cacheSwitch=!1;class z{constructor(){this.vertexBones=0,this.slotAttachMap=new Map,this.mainAttachMentOrder=[]}copyFrom(e){e.slotAttachMap.forEach(((e,t)=>{this.slotAttachMap.set(t,new Map(e))}))}attachMentParse(t,n){let r=e.ESpineRenderType.rigidBody,i=0,a=t.attachments,s=0,o=0;for(let e=0,t=n.length;e<t;e++){let t=a[e],h=n[e],l=h.boneData.index,d=this.slotAttachMap.get(e),p=h.attachmentName;if(d||(d=new Map,this.slotAttachMap.set(e,d)),t)for(let n in t){let a=t[n],p=null,m=new w;m.init(a,l,e,p,h),i=Math.max(i,m.vertexBones);let c=P.checkAttachment(m?m.sourceData:null);c<r&&(r=c),o+=m.indexCount,s+=m.vertexCount,d.set(n,m)}else if(p){let e=d.get(p);if(e){o+=e.indexCount,s+=e.vertexCount,i=Math.max(i,e.vertexBones);let t=P.checkAttachment(e?e.sourceData:null);t<r&&(r=t)}}if(!d.get(null)){let t=new w;t.slotId=e,t.color=h.color,t.boneIndex=l,t.attachment=null,d.set(t.attachment,t)}}switch(this.type=r,this.vertexBones=i,this.type){case e.ESpineRenderType.normal:case e.ESpineRenderType.boneGPU:this.mainVB=new V("UV,COLOR,POSITION,BONE",s);break;case e.ESpineRenderType.rigidBody:this.mainVB=new F("UV,COLOR,POSITION,RIGIDBODY",s)}this.mainIB=new E,this.mainIB.updateFormat(s),this.mainIB.setBufferLength(o)}init(e){let t=this.mainAttachMentOrder;e.forEach(((e,n)=>{let r=e.attachmentName;if(r){let e=this.slotAttachMap.get(n).get(r);e?this.mainVB.appendVB(e):e=this.slotAttachMap.get(n).get(null),e.isclip&&(this.isNormalRender=!0),t.push(e)}else{let e=this.slotAttachMap.get(n).get(null);t.push(e)}})),this.mainVB.initBoneMat(),this.mainIB.createIB(t,this.mainVB)}initAnimator(e){let t=e.createSkinData(this.mainVB,this.mainIB,this._tempIbCreate,this.slotAttachMap,this.mainAttachMentOrder,this.type);t.name=this.name,this.isNormalRender&&(t.isNormalRender=!0),t.isNormalRender&&(this.hasNormalRender=!0)}}class j{getSpineColor(){return t.Color.WHITE}changeSkeleton(e){}init(e,t,n,r){}play(e){}render(e){}setSkinIndex(e){}initBake(e){}destroy(){}}j.instance=new j;class G extends t.BaseRenderNode2D{static createRenderElement2D(){if(this._pool.length>0)return this._pool.pop();let e=t.LayaGL.render2DRenderPassFactory.createRenderElement2D();return e.renderStateIsBySprite=!1,e.nodeCommonMap=["spine2D"],e}static recoverRenderElement2D(e){e.canotPool||this._pool.push(e)}constructor(){super(),this._currentPlayTime=0,this._pause=!0,this._playbackRate=1,this._playAudio=!0,this._soundChannelArr=[],this.trackIndex=0,this._skinName="default",this._loop=!0,this._nMatrix_0=new t.Vector3,this._nMatrix_1=new t.Vector3,this._useFastRender=!0,this._needUpdate=!1,this._renderElements=[],this._materials=[],this.spineItem=j.instance,this._spriteShaderData.addDefine(t.BaseRenderNode2D.SHADERDEFINE_BASERENDER2D),this._spriteShaderData.addDefine(a.SPINE_UV),this._spriteShaderData.addDefine(a.SPINE_COLOR)}_getcommonUniformMap(){return["BaseRender2D","Spine2D"]}get externalSkins(){return this._externalSkins}set externalSkins(e){if(e)for(let t=e.length-1;t>=0;t--)e[t].target=this;this._externalSkins=e}addCMDCall(e,n,r){let i=this._spriteShaderData,a=e._curMat;if(this._nMatrix_0.setValue(a.a,a.b,a.tx+a.a*n+a.c*r),this._nMatrix_1.setValue(a.c,a.d,a.ty+a.b*n+a.d*r),i.setVector3(t.BaseRenderNode2D.NMATRIX_0,this._nMatrix_0),i.setVector3(t.BaseRenderNode2D.NMATRIX_1,this._nMatrix_1),t.Vector2.TEMP.setValue(e.width,e.height),i.setVector2(t.BaseRenderNode2D.BASERENDERSIZE,t.Vector2.TEMP),this._renderAlpha!==e.globalAlpha){let n=this.spineItem.getSpineColor(),r=n.a*e.globalAlpha,a=i.getColor(t.BaseRenderNode2D.BASERENDER2DCOLOR)||new t.Color;a.setValue(n.r,n.g,n.b,r),i.setColor(t.BaseRenderNode2D.BASERENDER2DCOLOR,a),this._renderAlpha=e.globalAlpha}let s=e._colorFiler;s?(this._spriteShaderData.addDefine(t.ShaderDefines2D.FILTERCOLOR),t.Matrix4x4.TEMP.cloneByArray(s._mat),i.setMatrix4x4(t.ShaderDefines2D.UNIFORM_COLORMAT,t.Matrix4x4.TEMP),t.Vector4.TEMP.setValue(s._alpha[0],s._alpha[1],s._alpha[2],s._alpha[3]),i.setVector(t.ShaderDefines2D.UNIFORM_COLORALPHA,t.Vector4.TEMP)):this._spriteShaderData.removeDefine(t.ShaderDefines2D.FILTERCOLOR),e._copyClipInfoToShaderData(i),this._lightReceive&&this._updateLight()}resetExternalSkin(){this._skeleton&&(this._skeleton=new spine.Skeleton(this._templet.skeletonData),this.spineItem.changeSkeleton(this._skeleton),this._flushExtSkin())}get source(){return this._source}set source(e){if(this._source=e,e){let n=t.ILaya.loader.getRes(e,t.Loader.SPINE);n?this.templet=n:t.ILaya.loader.load(e,t.Loader.SPINE).then((e=>{!this._source||e&&!e.isCreateFromURL(this._source)||this.destroyed||(this.templet=e)}))}else this.templet=null}get skinName(){return this._skinName}set skinName(e){this._skinName=e,this._templet&&this.showSkinByName(e)}get animationName(){return this._animationName}set animationName(e){this._animationName=e,this._templet&&this.play(e,this._loop,!0)}get maxDetlaTime(){return this._timeKeeper.maxDelta}set maxDetlaTime(e){this._timeKeeper.maxDelta=e}get loop(){return this._loop}set loop(e){this._loop=e,this._templet&&this.play(this._animationName,this._loop,!0)}set url(e){this._skin!=e&&(this._skin=e,t.Laya.loader.load(e,t.Loader.SPINE).then((e=>{this.init(e)})))}get url(){return this._skin}get templet(){return this._templet}set templet(e){this.init(e)}set currentTime(e){if(this._templet){if((e/=1e3)<this._playStart||this._playEnd&&e>this._playEnd||e>this._duration)throw new Error("AnimationPlayer: value must large than playStartTime,small than playEndTime.");this._state.update(e-this._currentPlayTime),this._currentPlayTime=e}}get playState(){return this._pause?this._currentPlayTime?G.PAUSED:G.STOPPED:G.PLAYING}set useFastRender(e){if(this._useFastRender!==e&&(this._useFastRender=e,this._templet))if(e){if(this.spineItem instanceof f){this.spineItem.destroy();let e=U.normalRenderSwitch;U.normalRenderSwitch=!1,this.spineItem=this._templet.sketonOptimise._initSpineRender(this._skeleton,this._templet,this,this._state),U.normalRenderSwitch=e,this.play(this._animationName,this._loop,!0,this._currentPlayTime)}}else this.changeNormal()}get useFastRender(){return this._useFastRender}onAwake(){this._skeleton&&t.LayaEnv.isPlaying&&void 0!==this._animationName&&this.play(this._animationName,this._loop,!0)}init(e){if(this.destroyed)return;if(this._templet&&(this.clear(),this.reset()),this._templet=e,!this._templet)return;if(this._templet._addReference(),this._skeleton=new spine.Skeleton(this._templet.skeletonData),this._stateData=new spine.AnimationStateData(this._skeleton.data),this._state=new spine.AnimationState(this._stateData),this._timeKeeper=new W(t.Laya.timer),this._useFastRender)this.spineItem=this._templet.sketonOptimise._initSpineRender(this._skeleton,this._templet,this,this._state);else{let e=U.normalRenderSwitch;U.normalRenderSwitch=!0,this.spineItem=this._templet.sketonOptimise._initSpineRender(this._skeleton,this._templet,this,this._state),U.normalRenderSwitch=e}let n=this._templet.getSkinIndexByName(this._skinName);-1!=n&&this.showSkinByIndex(n),this._state.addListener({start:e=>{},interrupt:e=>{},end:e=>{},dispose:e=>{},complete:e=>{this.event(t.Event.END),e.loop?this.event(t.Event.COMPLETE):this.stop()},event:(n,r)=>{let i={audioValue:r.data.audioPath,audioPath:r.data.audioPath,floatValue:r.floatValue,intValue:r.intValue,name:r.data.name,stringValue:r.stringValue,time:1e3*r.time,balance:r.balance,volume:r.volume};if(this.event(t.Event.LABEL,i),this._playAudio&&i.audioValue){let n=t.SoundManager.playSound(e.basePath+i.audioValue,1,t.Handler.create(this,this._onAniSoundStoped),null,(1e3*this._currentPlayTime-i.time)/1e3);t.SoundManager.playbackRate=this._playbackRate,n&&this._soundChannelArr.push(n)}}}),this._flushExtSkin(),this.event(t.Event.READY),t.LayaEnv.isPlaying&&void 0!==this._animationName&&this.play(this._animationName,this._loop,!0)}play(e,n,r=!0,i=0,a=0,s=!0,o=!0){if(this._playAudio=o,i/=1e3,a/=1e3,this._loop=n,i<0||a<0)throw new Error("SpineSkeleton: start and end must large than zero.");if(0!==a&&i>a)throw new Error("SpineSkeleton: start must less than end.");if("number"==typeof e)e=this.getAniNameByIndex(e);else{if(!!!this.templet.findAnimation(e))return}if(r||this._pause||this._currentPlayTime||this._animationName!=e){this._animationName=e,this.spineItem.play(e);let r=this._state.setAnimation(this.trackIndex,e,n);r.animationStart=i,a&&a<r.animationEnd&&(r.animationEnd=a);let s=r.animation.duration;this._duration=s,this._playStart=i,this._playEnd=a<=s?a:s,this._pause&&(this._pause=!1,this._beginUpdate()),this._update(),this.event(t.Event.PLAYED)}}_update(){this._timeKeeper.update();let e=this._state,t=this._timeKeeper.delta*this._playbackRate;e.update(t);let n=this._currentPlayTime=e.getCurrentPlayTime(this.trackIndex);e.apply(this._skeleton),this._state&&this._skeleton&&(this._skeleton.updateWorldTransform(),this.spineItem.render(n),this.owner.repaint())}_flushExtSkin(){if(null==this._skeleton)return;let e=this._externalSkins;if(e)for(let t=e.length-1;t>=0;t--)e[t].flush()}getAnimNum(){return this._templet.skeletonData.getAnimationsSize()}getAniNameByIndex(e){return this._templet.getAniNameByIndex(e)}getSlotByName(e){return this._skeleton.findSlot(e)}playbackRate(e){this._playbackRate=e}showSkinByName(e){this.showSkinByIndex(this._templet.getSkinIndexByName(e))}showSkinByIndex(e){this.spineItem.setSkinIndex(e),this._skeleton.showSkinByIndex(e),this._skeleton.setSlotsToSetupPose()}event(e,t){this.owner.event(e,t)}stop(){this._pause||(this._pause=!0,this._clearUpdate(),this._state.update(-this._currentPlayTime),this._currentPlayTime=0,this.event(t.Event.STOPPED),this._soundChannelArr.length>0&&this._onAniSoundStoped(!0))}_clearUpdate(){this._needUpdate=!1}_beginUpdate(){this._needUpdate=!0}onUpdate(){this._needUpdate&&this._update()}paused(){if(!this._pause&&(this._pause=!0,this._clearUpdate(),this.event(t.Event.PAUSED),this._soundChannelArr.length>0))for(let e=this._soundChannelArr.length,t=0;t<e;t++){let e=this._soundChannelArr[t];e.isStopped||e.pause()}}resume(){if(this._pause&&(this._pause=!1,this._beginUpdate(),this._soundChannelArr.length>0))for(let e=this._soundChannelArr.length,t=0;t<e;t++){let e=this._soundChannelArr[t];e.audioBuffer&&e.resume()}}_onAniSoundStoped(e){for(let t=this._soundChannelArr.length,n=0;n<t;n++){let r=this._soundChannelArr[n];(r.isStopped||e)&&(!r.isStopped&&r.stop(),this._soundChannelArr.splice(n,1),t--,n--)}}reset(){this._templet._removeReference(1),this._templet=null,this._timeKeeper=null,this._skeleton=null,this._state.clearListeners(),this._state=null,this._pause=!0,this._clearUpdate(),this._soundChannelArr.length>0&&this._onAniSoundStoped(!0)}addAnimation(e,t=!1,n=0){n/=1e3;let r=e;"number"==typeof r&&(r=this.getAniNameByIndex(r)),this._animationName=r,this._state.addAnimation(this.trackIndex,r,t,n)}setMix(e,t,n){n/=1e3;let r=e;"number"==typeof r&&(r=this.getAniNameByIndex(r));let i=t;"number"==typeof i&&(i=this.getAniNameByIndex(i)),this._stateData.setMix(r,i,n)}getBoneByName(e){return this._skeleton.findBone(e)}getSkeleton(){return this._skeleton}setSlotAttachment(e,t){this.changeNormal(),this._skeleton.setAttachment(e,t)}clear(){this._mesh=null,this._renderElements.forEach((e=>{G.recoverRenderElement2D(e)})),super.clear()}changeNormal(){if(!(this.spineItem instanceof f)){this.spineItem.destroy();let e=U.normalRenderSwitch;U.normalRenderSwitch=!0,this.spineItem=this._templet.sketonOptimise._initSpineRender(this._skeleton,this._templet,this,this._state),U.normalRenderSwitch=e}}onDestroy(){this._templet&&this.reset(),this.spineItem.destroy()}_updateMaterials(e){for(let t=0,n=e.length;t<n;t++)this._materials[t]=e[t]}_updateRenderElements(){let e=this._renderElements.length;for(let t=0;t<e;t++){let e=this._renderElements[t],n=this._materials[t];e.materialShaderData=n.shaderData,e.subShader=n._shader.getSubShaderAt(0),e.value2DShaderData=this._spriteShaderData}}_onMeshChange(e,t=!1){let n=!1;if(this._mesh!=e||t)if(n=!0,e){let t=e._subMeshes,n=this._renderElements.length,r=Math.max(n,e.subMeshCount);for(let e=0;e<r;e++){let n=this._renderElements[e],r=t[e];if(r){n||(n=G.createRenderElement2D(),this._renderElements[e]=n);let t=this._materials[e];n.geometry=r,n.materialShaderData=t.shaderData,n.subShader=t._shader.getSubShaderAt(0),n.value2DShaderData=this._spriteShaderData,n.nodeCommonMap=this._getcommonUniformMap()}else G.recoverRenderElement2D(n)}this._renderElements.length=e.subMeshCount}else{for(let e=0,t=this._renderElements.length;e<t;e++)G.recoverRenderElement2D(this._renderElements[e]);this._renderElements.length=0}return this._mesh=e,n}getMaterial(e,t){let n;return this._materials.length<=this._renderElements.length?n=this.templet.getMaterial(e,t):(n=this._materials[this._renderElements.length],a.SetSpineBlendMode(t,n,this.templet.premultipliedAlpha),n.setTextureByIndex(a.SpineTexture,e)),n}}G._pool=[],G.STOPPED=0,G.PAUSED=1,G.PLAYING=2;class W{constructor(e){this.maxDelta=.064,this.timer=e}update(){this.delta=this.timer.delta/1e3,this.delta>this.maxDelta&&(this.delta=this.maxDelta)}}t.ClassUtils.regClass("Spine2DRenderNode",G);class X extends t.Sprite{constructor(){super(),this._spineComponent=this.addComponent(G)}get externalSkins(){return this._spineComponent.externalSkins}set externalSkins(e){this._spineComponent.externalSkins=e}resetExternalSkin(){this._spineComponent.resetExternalSkin()}get source(){return this._spineComponent.source}set source(e){this._spineComponent.source=e}get skinName(){return this._spineComponent.skinName}set skinName(e){this._spineComponent.skinName=e}get animationName(){return this._spineComponent.animationName}set animationName(e){this._spineComponent.animationName=e}get loop(){return this._spineComponent.loop}set loop(e){this._spineComponent.loop=e}get templet(){return this._spineComponent.templet}set templet(e){this._spineComponent.templet=e}set currentTime(e){this._spineComponent.currentTime=e}get playState(){return this._spineComponent.playState}get spineItem(){return this._spineComponent.spineItem}set spineItem(e){this._spineComponent.spineItem=e}play(e,t,n=!0,r=0,i=0,a=!0,s=!0){this._spineComponent.play(e,t,n,r,i,a,s)}getAnimNum(){return this._spineComponent.getAnimNum()}getAniNameByIndex(e){return this._spineComponent.getAniNameByIndex(e)}getSlotByName(e){return this._spineComponent.getSlotByName(e)}playbackRate(e){this._spineComponent.playbackRate(e)}showSkinByName(e){this._spineComponent.showSkinByName(e)}showSkinByIndex(e){this._spineComponent.showSkinByIndex(e)}stop(){this._spineComponent.stop()}paused(){this._spineComponent.paused()}resume(){this._spineComponent.resume()}destroy(e=!0){this._spineComponent.templet&&this._spineComponent.reset(),super.destroy(e)}addAnimation(e,t=!1,n=0){this._spineComponent.addAnimation(e,t,n)}setMix(e,t,n){this._spineComponent.setMix(e,t,n)}getBoneByName(e){return this._spineComponent.getBoneByName(e)}getSkeleton(){return this._spineComponent.getSkeleton()}setSlotAttachment(e,t){this._spineComponent.setSlotAttachment(e,t)}}e.ESpineRenderType=void 0,(N=e.ESpineRenderType||(e.ESpineRenderType={}))[N.boneGPU=0]="boneGPU",N[N.normal=1]="normal",N[N.rigidBody=2]="rigidBody";class H extends t.Resource{constructor(){super(),this.materialMap=new Map,this.mainBlendMode=0,this._premultipliedAlpha=!0,this._textures={},this.sketonOptimise=new U}get _mainTexture(){let e,t=0;for(let n in this._textures)if(e=this._textures[n],e&&(t++,t>1))return null;return e}get premultipliedAlpha(){return this._premultipliedAlpha}get basePath(){return this._basePath}getMaterial(e,n){e||(console.error("SpineError:cant Find Main Texture"),e=t.Texture2D.whiteTexture);let r=e.id+"_"+n,i=this.materialMap.get(r);return i||(i=new t.Material,i.setShaderName("SpineStandard"),a.initSpineMaterial(i),i.setTextureByIndex(a.SpineTexture,e),1!=e.gammaCorrection?i.addDefine(t.ShaderDefines2D.GAMMATEXTURE):i.removeDefine(t.ShaderDefines2D.GAMMATEXTURE),a.SetSpineBlendMode(n,i,this._premultipliedAlpha),this._premultipliedAlpha?i.addDefine(a.SPINE_PREMULTIPLYALPHA):i.removeDefine(a.SPINE_PREMULTIPLYALPHA),i._addReference(),this.materialMap.set(r,i)),i}getTexture(e){return this._textures[e]}_parse(e,t,n,r=!0){var i;let a=new spine.AtlasAttachmentLoader(t);if(e instanceof ArrayBuffer){let t=new spine.SkeletonBinary(a,!1);this.skeletonData=t.readSkeletonData(new Uint8Array(e))}else{let t=new spine.SkeletonJson(a,!1);this.skeletonData=t.readSkeletonData(e)}this._textures=n,this.mainBlendMode=(null===(i=this.skeletonData.slots[0])||void 0===i?void 0:i.blendMode)||0,this.mainTexture=this._mainTexture,this.width=this.skeletonData.width,this.height=this.skeletonData.height,this.offsetX=this.skeletonData.x,this.offsetY=this.skeletonData.y,this._premultipliedAlpha=r,this.sketonOptimise.checkMainAttach(this.skeletonData)}getAniNameByIndex(e){let t=this.skeletonData.getAnimationByIndex(e);return t?t.name:null}findAnimation(e){return this.skeletonData.findAnimation(e)}getSkinIndexByName(e){return this.skeletonData.getSkinIndexByName(e)}_disposeResource(){this.sketonOptimise.destroy();for(let e in this._textures){let t=this._textures[e];t&&t._removeReference()}this._referenceCount<=0?(this.materialMap.forEach((e=>{e._removeReference()})),this.materialMap.clear()):console.error("SpineTemplet is using"),this.skeletonData=null,this.sketonOptimise=null}}H.RuntimeVersion="3.8";class Y{constructor(e){this.realTexture=e}getImage(){var e,t,n,r;return{width:null!==(t=null===(e=this.realTexture)||void 0===e?void 0:e.width)&&void 0!==t?t:16,height:null!==(r=null===(n=this.realTexture)||void 0===n?void 0:n.height)&&void 0!==r?r:16}}setFilters(e,n){if(!this.realTexture)return;let r;r=n===window.spine.TextureFilter.Nearest?t.FilterMode.Point:t.FilterMode.Bilinear,this.realTexture.filterMode=r}convertWrapMode(e){return e==spine.TextureWrap.ClampToEdge?t.WrapMode.Clamp:e==spine.TextureWrap.MirroredRepeat?t.WrapMode.Mirrored:t.WrapMode.Repeat}setWraps(e,t){this.realTexture&&(this.realTexture.wrapModeU=this.convertWrapMode(e),this.realTexture.wrapModeV=this.convertWrapMode(t))}}const K=!1;t.Loader.registerLoader(["skel"],class{load(e){let n=t.Utils.replaceFileExtension(e.url,"atlas");return Promise.all([e.loader.fetch(e.url,"skel"==e.ext?"arraybuffer":"json",e.progress.createCallback()),e.loader.fetch(n,"text",e.progress.createCallback())]).then((t=>{if(!t[0]||!t[1])return null;let n=new H,r=H.RuntimeVersion;return"4.1"==r&&(n.needSlot=!0),r.startsWith("4.")?this.parseAtlas4(t[0],t[1],e,n):this.parseAtlas3(t[0],t[1],e,n)}))}parseAtlas3(e,n,r,i){var a;let s=[],o=t.URL.getPath(r.url),h=new spine.TextureAtlas(n,(e=>{let n=o+e;return s.push({url:n,type:t.Loader.TEXTURE2D,propertyParams:{premultiplyAlpha:K},constructParams:[0,0,t.TextureFormat.R8G8B8A8,!1,!1,!0,K]}),new Y(null)}));return t.Laya.loader.load(s,null,null===(a=r.progress)||void 0===a?void 0:a.createCallback()).then((t=>{let n={},r=!0;for(var a=0;a<t.length;a++){let e=t[a];e&&e._addReference();let i=h.pages[a];r=i.pma||e._premultiplyAlpha&&r,i.texture.realTexture=e,i.texture.setFilters(i.minFilter,i.magFilter),i.texture.setWraps(i.uWrap,i.vWrap),i.width=i.texture.getImage().width,i.height=i.texture.getImage().height,n[i.name]=e}let s=h.regions;for(const e of s){let t=e.page;e.u=e.x/t.width,e.v=e.y/t.height,e.rotate?(e.u2=(e.x+e.height)/t.width,e.v2=(e.y+e.width)/t.height):(e.u2=(e.x+e.width)/t.width,e.v2=(e.y+e.height)/t.height)}return i._parse(e,h,n,r),i}))}parseAtlas4(e,n,r,i){var a;let s=new spine.TextureAtlas(n),o=t.URL.getPath(r.url);return t.Laya.loader.load(s.pages.map((e=>({url:o+e.name,type:t.Loader.TEXTURE2D,propertyParams:{premultiplyAlpha:K},constructParams:[0,0,t.TextureFormat.R8G8B8A8,!1,!1,!0,K]}))),null,null===(a=r.progress)||void 0===a?void 0:a.createCallback()).then((t=>{let n={},r=s.pages,a=!0;for(let e=0,i=t.length;e<i;e++){let i=t[e];i&&i._addReference();let s=r[e];a=s.pma||i._premultiplyAlpha&&a,n[s.name]=i,s.setTexture(new Y(i))}return i._parse(e,s,n,a),i}))}},t.Loader.SPINE);let J=t.ClassUtils.regClass;J("SpineSkeleton",X),J("ExternalSkin",n),J("ExternalSkinItem",r),t.Laya.addBeforeInitCallback((()=>{t.PlayerConfig.spineVersion&&(H.RuntimeVersion=t.PlayerConfig.spineVersion)}));class Z extends t.Script{constructor(){super()}onEnable(){this.bakeData&&this.initBake(JSON.parse(this.bakeData))}onDisable(){let e=this.owner.getComponent(G);e.spineItem&&e.spineItem.initBake(null)}async attach(e){let n=await t.Laya.loader.load({url:this.url,type:t.Loader.TEXTURE2D,constructParams:[256,256,t.TextureFormat.R32G32B32A32,!1,!1,!1,!1]});e.initBake({bonesNums:60,aniOffsetMap:{idle:0,skill:21480},texture2d:n})}async initBake(e){const n=e.aniOffsetMap.textureWidth||256;let r=await t.Laya.loader.load({url:e.simpPath,type:t.Loader.TEXTURE2D,constructParams:[n,n,t.TextureFormat.R32G32B32A32,!1,!1,!1,!1]});e.texture2d=r;let i=this.owner.getComponent(G);!i.spineItem||i.spineItem instanceof j?this.owner.on(t.Event.READY,this,(()=>{i.spineItem.initBake(e)})):i.spineItem.initBake(e)}}t.ClassUtils.regClass("SpineBakeScript",Z);class ${constructor(){this._recoverList=new t.FastSinglelist}check(e,t){return e.materialShaderData==t.materialShaderData&&!e.geometry.instanceCount&&!t.geometry.instanceCount}batchRenderElement(e,t,n){let r=e.elements,i=-1;for(let a=0;a<n-1;a++){let n=t+a,s=r[n],o=r[n+1];this.check(s,o)?-1==i&&(i=a):(-1!=i&&this.batch(e,i+t,a-i),i=0)}-1!=i&&this.batch(e,i+t,n-i)}updateBuffer(e,t,n,r){let i=e.nMatrixInstanceVB,a=e.simpleAnimatorVB;i.setData(t.buffer,0,0,6*r*4),a.setData(n.buffer,0,0,4*r*4)}batch(e,n,r){let i,s,o,h=e.elements,l=q._instanceBufferCreate(6*q.MaxInstanceCount),d=q._instanceBufferCreate(4*q.MaxInstanceCount),p=0;for(let m=0;m<r;m++){let r=h[n+m],c=r.value2DShaderData;if(!i){let e=r.geometry;o=q.getInstanceInfo(e),i=o.element,this._recoverList.add(o),s=i.geometry,p=s.instanceCount=0,i.subShader=r.subShader,i.materialShaderData=r.materialShaderData,i.value2DShaderData=r.value2DShaderData,i.renderStateIsBySprite=r.renderStateIsBySprite,i.nodeCommonMap=r.nodeCommonMap,i.value2DShaderData.addDefine(a.SPINE_GPU_INSTANCE)}let u=c.getVector3(t.BaseRenderNode2D.NMATRIX_0),f=c.getVector3(t.BaseRenderNode2D.NMATRIX_1),_=6*p;l[_]=u.x,l[_+1]=u.y,l[_+2]=u.z,l[_+3]=f.x,l[_+4]=f.y,l[_+5]=f.z;let g=c.getVector(a.SIMPLE_SIMPLEANIMATORPARAMS),x=4*p;d[x]=g.x,d[x+1]=g.y,d[x+2]=g.z,d[x+3]=g.w,p++,s.instanceCount=p,s.instanceCount==q.MaxInstanceCount&&(this.updateBuffer(o,l,d,s.instanceCount),e.add(i),i=null)}i&&(this.updateBuffer(o,l,d,s.instanceCount),e.add(i)),q._instanceBufferRecover(l),q._instanceBufferRecover(d)}recover(){let e=this._recoverList.length,t=this._recoverList.elements;for(let n=0;n<e;n++){let e=t[n];q.recover(e)}this._recoverList.length=0}}t.Laya.addAfterInitCallback((function(){$.instance=new $,t.RenderManager2D.regisBatch(t.BaseRender2DType.spineSimple,$.instance)}));class q{static getInstanceInfo(e){let t=q._instanceBufferInfoMap.get(e);return t||(t=[],q._instanceBufferInfoMap.set(e,t)),t.pop()||q.createInstanceInfo(e)}static createInstanceInfo(e){let n=t.LayaGL.render2DRenderPassFactory.createRenderElement2D(),r=n.geometry=t.LayaGL.renderDeviceFactory.createRenderGeometryElement(t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),i=t.LayaGL.renderDeviceFactory.createBufferState(),s={state:i,element:n,source:e},o=e.bufferState._vertexBuffers.slice(),h=t.LayaGL.renderDeviceFactory.createVertexBuffer(t.BufferUsage.Dynamic);h.setDataLength(16*q.MaxInstanceCount*4),h.vertexDeclaration=a.instanceNMatrixDeclaration,h.instanceBuffer=!0,o.push(h),s.nMatrixInstanceVB=h;let l=t.LayaGL.renderDeviceFactory.createVertexBuffer(t.BufferUsage.Dynamic);return l.setDataLength(4*q.MaxInstanceCount*4),l.vertexDeclaration=a.instanceSimpleAnimatorDeclaration,l.instanceBuffer=!0,o.push(l),s.simpleAnimatorVB=l,i.applyState(o,e.bufferState._bindedIndexBuffer),r.drawParams.elements=e.drawParams.elements.slice(),r.drawParams.length=e.drawParams.length,r.indexFormat=e.indexFormat,r.bufferState=i,s}static recover(e){let t=e.element;t.value2DShaderData.removeDefine(a.SPINE_GPU_INSTANCE),t.value2DShaderData=null,t.materialShaderData=null,t.subShader=null,t.nodeCommonMap=null,q._instanceBufferInfoMap.get(e.source).push(e)}static _instanceBufferCreate(e){let t=q._bufferPool[e];return t||(t=q._bufferPool[e]=[]),t.pop()||new Float32Array(e)}static _instanceBufferRecover(e){let t=e.length,n=q._bufferPool[t];n||(n=q._bufferPool[t]=[]),n.push(e)}}q.MaxInstanceCount=2048,q._instanceBufferInfoMap=new Map,q._pool=[],q._bufferPool=[],e.AnimationRender=D,e.AnimationRenderProxy=b,e.AttachmentParse=w,e.ChangeDeform=_,e.ChangeDrawOrder=g,e.ChangeRGBA=x,e.ChangeSlot=S,e.ExternalSkin=n,e.ExternalSkinItem=r,e.IBCreator=E,e.MultiRenderData=B,e.SketonOptimise=U,e.SkinAniRenderData=A,e.SkinAttach=z,e.SkinRenderUpdate=M,e.SlotUtils=P,e.Spine2DRenderNode=G,e.SpineAdapter=c,e.SpineBakeScript=Z,e.SpineEmptyRender=j,e.SpineInstanceBatch=$,e.SpineInstanceElement2DTool=q,e.SpineMeshBase=s,e.SpineMeshUtils=i,e.SpineNormalRender=f,e.SpineNormalRenderBase=h,e.SpineOptimizeConst=v,e.SpineOptimizeRender=R,e.SpineShaderInit=a,e.SpineSkeleton=X,e.SpineSkeletonRenderer=d,e.SpineTemplet=H,e.SpineTexture=Y,e.SpineVirtualMesh=o,e.SpineWasmRender=m,e.SpineWasmVirturalMesh=p,e.VBBoneCreator=V,e.VBCreator=O,e.VBRigBodyCreator=F}(window.Laya=window.Laya||{},Laya);